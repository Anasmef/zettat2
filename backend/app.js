const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();
const Admin = require('./models/adminModel');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const Actualite = require('./models/Actualite');

const { NotificationSupprimee, Configuration } = require('./models/notificationModel');

const ContactMessage = require('./models/contactModel');
const Activity = require('./models/Activity');

const Etudiant = require('./models/etudiantModel');
const multer = require('multer');
const path = require('path');
const uploadMessageFile = require('./middlewares/uploadMessageFile');
const Rappel = require('./models/RappelPaiement');
const QrWeekPlanning = require('./models/QrWeekPlanning');
const QrSession = require('./models/QrSession');
const Cours = require('./models/coursModel');
const Paiement = require('./models/paiementModel'); // ÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ŸÇŸÖÿ™ ÿ®ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÑŸÅ
const Evenement = require('./models/evenementModel');
const Presence = require('./models/presenceModel');
const Professeur = require('./models/professeurModel'); // ÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ£ŸÜÿ¥ÿ£ÿ™ Ÿáÿ∞ÿß ÿßŸÑŸÖŸÑŸÅ
const authAdmin = require('./middlewares/authAdmin');
const authProfesseur = require('./middlewares/authProfesseur');
const authEtudiant = require('./middlewares/authEtudiant');
const Document = require('./models/documentModel');
const Exercice = require('./models/exerciceModel');
const Message = require('./models/messageModel');
const Seance = require('./models/Seance');

const app = express();


// Middlewares
app.use(cors());
app.use(express.json());
app.use('/documents', express.static('documents'));
function genererLienLive(nomCours) {
  const dateStr = new Date().toISOString().split('T')[0]; // ex: 2025-07-07
  const nomSession = `Zettat_${nomCours}_${dateStr}`.replace(/\s+/g, '_');
  return `https://meet.jit.si/${nomSession}`;
}

// Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ Connexion √† MongoDB r√©ussie'))
.catch((err) => console.error('‚ùå Erreur MongoDB:', err));
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // ŸÖÿ¨ŸÑÿØ ÿßŸÑÿµŸàÿ±
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, file.fieldname + '-' + uniqueSuffix + ext);
  }
});

const upload = multer({ storage: storage });
app.use('/uploads', express.static('uploads'));
app.get('/api/evenements/public', async (req, res) => {
  try {
    const today = new Date();
    const events = await Evenement.find({
      dateFin: { $gte: today }
    }).sort({ dateDebut: 1 });

    res.json(events);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
const genererToken = (admin) => {
    return jwt.sign({ id: admin._id }, 'jwt_secret_key', { expiresIn: '7d' });
};

// üìÅ ÿ•ÿπÿØÿßÿØ ÿ±ŸÅÿπ ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ (PDF, Word)
const documentStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'documents/'); // ŸÖÿ¨ŸÑÿØ ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ
  },
  filename: function (req, file, cb) {
    const unique = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname).toLowerCase();
    cb(null, file.fieldname + '-' + unique + ext);
  }
});

const documentUpload = multer({
  storage: documentStorage,
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['.pdf', '.doc', '.docx'];
    const ext = path.extname(file.originalname).toLowerCase();
    if (!allowedTypes.includes(ext)) {
      return cb(new Error('Seuls les fichiers PDF et Word sont autoris√©s'));
    }
    cb(null, true);
  }
});
const exerciceUpload = multer({ storage: storage }); // utiliser ŸÜŸÅÿ≥ multer
const storageVieScolaire = multer.diskStorage({
  destination: function (req, file, cb) {
    const dir = path.join(__dirname, 'uploads/vieScolaire');
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const uploadVieScolaire = multer({ storage: storageVieScolaire });

// ‚úÖ Inscription Admin
app.post('/api/admin/register', async (req, res) => {
    try {
        const { nom, email, motDePasse } = req.body;

        const existe = await Admin.findOne({ email });
        if (existe) return res.status(400).json({ message: 'Email d√©j√† utilis√©' });

        const hashed = await bcrypt.hash(motDePasse, 10);
        const admin = new Admin({ nom, email, motDePasse: hashed });
        await admin.save();

        const token = genererToken(admin);
        res.status(201).json({ admin, token });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});


// üü© Route: POST /api/documents
// ŸÖŸÜ ŸÇÿ®ŸÑ ÿ£ÿ≥ÿ™ÿßÿ∞ ÿ£Ÿà ŸÖÿØŸäÿ±
app.post('/api/documents', (req, res, next) => {
  // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿØŸàÿ±
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Token requis' });

  try {
    const decoded = jwt.verify(token, 'jwt_secret_key');
    req.utilisateur = decoded;
    next();
  } catch (err) {
    return res.status(401).json({ message: 'Token invalide' });
  }
}, documentUpload.single('fichier'), async (req, res) => {
  try {
    const { titre, cours } = req.body;

    const fichier = `/documents/${req.file.filename}`;

    const doc = new Document({
      titre,
      cours,
      fichier,
      creePar: req.utilisateur.id
    });

    await doc.save();
    res.status(201).json({ message: 'üìÑ Document ajout√©', document: doc });
  } catch (err) {
    res.status(500).json({ message: '‚ùå Erreur upload document', error: err.message });
  }
});

// ‚úÖ Login Admin
app.post('/api/login', async (req, res) => {
  const { email, motDePasse } = req.body;

  // ‚úÖ Essayer comme admin
  const admin = await Admin.findOne({ email });
  if (admin && await bcrypt.compare(motDePasse, admin.motDePasse)) {
    const token = jwt.sign({ id: admin._id, role: 'admin' }, 'jwt_secret_key', { expiresIn: '7d' });
    return res.json({ user: admin, token, role: 'admin' });
  }

  // ‚úÖ Essayer comme professeur
const professeur = await Professeur.findOne({ email });
if (professeur && await professeur.comparePassword(motDePasse)) {
  if (!professeur.actif) {
    return res.status(403).json({ message: '‚õîÔ∏è Votre compte est inactif. Veuillez contacter l‚Äôadministration.' });
  }

  // ‚úÖ Mise √† jour de lastSeen
  professeur.lastSeen = new Date();
  await professeur.save();

  const token = jwt.sign({ id: professeur._id, role: 'prof' }, 'jwt_secret_key', { expiresIn: '7d' });
  return res.json({ user: professeur, token, role: 'prof' });
}



  // ‚úÖ Essayer comme √©tudiant
const etudiant = await Etudiant.findOne({ email });
if (etudiant && await bcrypt.compare(motDePasse, etudiant.motDePasse)) {
  if (!etudiant.actif) {
    return res.status(403).json({ message: '‚õîÔ∏è Votre compte est d√©sactiv√©. Contactez l‚Äôadministration.' });
  }
etudiant.lastSeen = new Date();
  await etudiant.save();

  const token = jwt.sign({ id: etudiant._id, role: 'etudiant' }, 'jwt_secret_key', { expiresIn: '7d' });
  return res.json({ user: etudiant, token, role: 'etudiant' });
}


  // ‚ùå Si aucun ne correspond
  return res.status(401).json({ message: 'Email ou mot de passe incorrect' });
});

app.get('/api/etudiant/notifications', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId);
    const aujourdHui = new Date();

    const paiements = await Paiement.find({ etudiant: req.etudiantId });

    // Grouper les paiements par cours
    const paiementsParCours = new Map();

    for (const p of paiements) {
      for (const nomCours of p.cours) {
        if (!paiementsParCours.has(nomCours)) {
          paiementsParCours.set(nomCours, []);
        }
        paiementsParCours.get(nomCours).push(p);
      }
    }

    const notifications = [];

    for (const [cours, paiementsCours] of paiementsParCours.entries()) {
      // Construire les p√©riodes {debut, fin} pour chaque paiement
      const periodes = paiementsCours.map(p => {
        const debut = new Date(p.moisDebut);
        const fin = new Date(debut);
        fin.setMonth(fin.getMonth() + p.nombreMois);
        return { debut, fin };
      });

      // Trier les p√©riodes par date de d√©but
      periodes.sort((a, b) => a.debut - b.debut);

      // Fusionner les p√©riodes qui se chevauchent ou se suivent
      const fusionnees = [];
      let current = periodes[0];

      for (let i = 1; i < periodes.length; i++) {
        const next = periodes[i];
        if (next.debut <= current.fin) {
          // Chevauchement ou continuit√©
          current.fin = new Date(Math.max(current.fin.getTime(), next.fin.getTime()));
        } else {
          fusionnees.push(current);
          current = next;
        }
      }
      fusionnees.push(current);

      // V√©rifier si aujourd'hui est dans une des p√©riodes fusionn√©es
      let estActif = false;
      let joursRestants = null;

      for (const periode of fusionnees) {
        if (aujourdHui >= periode.debut && aujourdHui <= periode.fin) {
          estActif = true;
          joursRestants = Math.ceil((periode.fin - aujourdHui) / (1000 * 60 * 60 * 24));
          break;
        }
      }

      if (!estActif) {
        const derniereFin = fusionnees[fusionnees.length - 1].fin;
        const joursDepuis = Math.ceil((aujourdHui - derniereFin) / (1000 * 60 * 60 * 24));
        notifications.push({
          type: 'paiement_expire',
          cours,
          message: `üí∞ Le paiement pour le cours "${cours}" a expir√© depuis ${joursDepuis} jour(s).`
        });
      } else if (joursRestants <= 2) {
        notifications.push({
          type: 'paiement_bientot',
          cours,
          message: `‚è≥ Le paiement pour le cours "${cours}" expirera dans ${joursRestants} jour(s).`
        });
      }
    }

    res.json(notifications);
  } catch (err) {
    console.error('Erreur lors du chargement des notifications paiement √©tudiant:', err);
    res.status(500).json({ error: err.message });
  }
});



// ‚úÖ Route prot√©g√©e : Dashboard admin
app.get('/api/admin/dashboard', authAdmin, async (req, res) => {
  try {
    const admin = await Admin.findById(req.adminId).select('-motDePasse');
    res.json({ message: 'Bienvenue sur le tableau de bord', admin });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


// ‚úÖ Logout (le client supprime simplement le token)
app.post('/api/admin/logout', (req, res) => {
    res.json({ message: 'D√©connexion r√©ussie' });
});
// Ajouter un √©tudiant

app.post('/api/etudiants', authAdmin, upload.single('image'), async (req, res) => {
  try {
    const { nomComplet, genre, dateNaissance, telephone, email, motDePasse } = req.body;
    let { cours, actif } = req.body;

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿ∫Ÿäÿ± ŸÖÿ≥ÿ™ÿÆÿØŸÖ
    const existe = await Etudiant.findOne({ email });
    if (existe) {
      return res.status(400).json({ message: 'Email d√©j√† utilis√© par un autre √©tudiant' });
    }

    // ÿ™ÿ£ŸÉÿØ ÿ£ŸÜ cours ÿπÿ®ÿßÿ±ÿ© ÿπŸÜ ŸÖÿµŸÅŸàŸÅÿ©
    if (typeof cours === 'string') {
      cours = [cours];
    }

    // ÿ™ÿ≠ŸàŸäŸÑ actif ÿ•ŸÑŸâ Boolean
    const actifBool = actif === 'true' || actif === true;

    // ŸÖÿ≥ÿßÿ± ÿßŸÑÿµŸàÿ±ÿ©
    const imagePath = req.file ? `/uploads/${req.file.filename}` : '';

    // ÿ™ÿ¥ŸÅŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±
    const hashedPassword = await bcrypt.hash(motDePasse, 10);

    const etudiant = new Etudiant({
      nomComplet,
      genre,
      dateNaissance: new Date(dateNaissance),
      telephone,
      email,
      motDePasse: hashedPassword,
      cours,
      image: imagePath,
      actif: actifBool,
      creeParAdmin: req.adminId
    });

    await etudiant.save();
    res.status(201).json(etudiant);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


// Lister tous les √©tudiants
app.get('/api/etudiants', authAdmin, async (req, res) => {
  try {
    const etudiants = await Etudiant.find()
      .select('-motDePasse') // ‚ùå ÿ•ÿÆŸÅÿßÿ° ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±
      .populate('creeParAdmin', 'nom email');
    res.json(etudiants);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// üìå ÿ™ŸàŸÑŸäÿØ QR - ŸÅŸÇÿ∑ ŸÖŸÜ ÿ∑ÿ±ŸÅ ÿßŸÑÿ£ÿØŸÖŸäŸÜ
// ‚úÖ Nouveau endpoint pour g√©n√©rer le QR d'une seule journ√©e

app.post('/api/admin/qr-day-generate', async (req, res) => {
  try {
    const { date } = req.body;
    if (!date) return res.status(400).json({ message: '‚ùå ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ŸÖŸÅŸÇŸàÿØ' });

    const jours = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
    const jourNom = jours[new Date(date).getDay()];

    const QrSession = require('./models/QrSession');
    const QrWeekPlanning = require('./models/QrWeekPlanning');
    const Etudiant = require('./models/etudiantModel');
    const Presence = require('./models/presenceModel');

    // üóëÔ∏è Supprimer toutes les sessions et pr√©sences du m√™me jour
    await QrSession.deleteMany({ date });
    await Presence.deleteMany({ dateSession: date });

    // üîç R√©cup√©rer les sessions de ce jour
    const sessions = await QrWeekPlanning.find({ jour: jourNom });

    const qrSessions = [];

    for (const s of sessions) {
      if (!s.periode || !s.horaire) {
        return res.status(400).json({ message: `‚ùå Session invalide: p√©riode ou horaire manquant (cours: ${s.cours})` });
      }

      const currentPeriode = s.periode; // ‚ùó NE PAS raccourcir la p√©riode

      // ‚úÖ Cr√©er la session QR
      const newSession = await QrSession.create({
        date,
        periode: currentPeriode, // garder matin1, matin2, soir1, soir2...
        cours: s.cours,
        professeur: s.professeur,
        matiere: s.matiere,
        horaire: s.horaire
      });

      // ‚úÖ Cr√©er les pr√©sences par d√©faut pour tous les √©tudiants
      const etudiants = await Etudiant.find({ cours: s.cours });
      for (const etu of etudiants) {
        await Presence.create({
          etudiant: etu._id,
          cours: s.cours,
          dateSession: date,
          periode: currentPeriode,
          heure: s.horaire,
          matiere: s.matiere,
          present: false,
          creePar: s.professeur,
          nomProfesseur: ''
        });
      }

      // Ajouter √† la r√©ponse
      qrSessions.push({
        date,
        periode: currentPeriode,
        cours: s.cours,
        professeur: s.professeur,
        matiere: s.matiere,
        jour: jourNom,
        horaire: s.horaire
      });
    }

    res.status(200).json({
      type: 'qr-day',
      date,
      jour: jourNom,
      qrSessions
    });

  } catch (err) {
    console.error('‚ùå Erreur generation QR day:', err);
    res.status(500).json({ message: '‚ùå Erreur serveur lors de la g√©n√©ration du QR Day' });
  }
});


app.post('/api/presence/qr/generate', authAdmin, async (req, res) => {
  try {
    const { classe, professeurId, matiere, horaire } = req.body;

    if (!classe || !professeurId || !horaire) {
      return res.status(400).json({ message: '‚ùå Classe, professeur et horaire sont requis' });
    }

    const now = new Date();
    const date = now.toISOString().split('T')[0];
    const hour = now.getHours();
    const periode = hour < 12 ? 'matin' : 'soir';

    // üóëÔ∏è ÿ≠ÿ∞ŸÅ ÿßŸÑÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÇÿØŸäŸÖÿ© ÿ•ŸÜ Ÿàÿ¨ÿØÿ™
    await QrSession.deleteOne({ date, periode, cours: classe });

    // ‚úÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ŸÑÿ≥ÿ© ÿ¨ÿØŸäÿØÿ© ÿ®ŸÄ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÉÿßŸÖŸÑÿ©
    const session = new QrSession({
      date,
      periode,
      cours: classe,            // Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ `cours`
      professeur: professeurId,
      matiere: matiere || '',
      horaire
    });

    await session.save();

    const qrPayload = JSON.stringify({
      date,
      periode,
      cours: classe,
      professeur: professeurId,
      matiere,
      horaire
    });

    res.status(200).json({
      qrData: qrPayload,
      payload: {
        date,
        periode,
        cours: classe,
        professeur: professeurId,
        matiere,
        horaire
      }
    });

  } catch (err) {
    console.error('‚ùå Erreur dans qr/generate:', err);
    res.status(500).json({ message: '‚ùå Erreur serveur lors de la g√©n√©ration du QR' });
  }
});
// ‚úÖ /api/admin/save-week-planning
app.post('/api/admin/save-week-planning', async (req, res) => {
  const { planning } = req.body;
  try {
    for (const entry of planning) {
      await QrWeekPlanning.findOneAndUpdate(
        {
          jour: entry.jour,
          cours: entry.cours,
          periode: entry.periode,
          horaire: entry.horaire  // ‚úÖ ÿ£ÿ∂ŸÅ ÿßŸÑÿ™ŸàŸÇŸäÿ™ ŸÑÿ™ŸÖŸäŸäÿ≤ ÿßŸÑÿ¨ŸÑÿ≥ÿßÿ™
        },
        entry,
        { upsert: true, new: true }
      );
    }
    res.status(200).json({ message: '‚úÖ Planning sauvegard√© avec succ√®s' });
  } catch (err) {
    console.error('‚ùå Erreur sauvegarde planning:', err);
    res.status(500).json({ message: '‚ùå Erreur lors de la sauvegarde' });
  }
});





// ‚úÖ route: GET /api/admin/qr-week
app.get('/api/admin/qr-week', authAdmin, async (req, res) => {
  try {
    const plannings = await require('./models/QrWeekPlanning')
      .find()
      .populate('professeur', 'nom'); // ŸÅŸÇÿ∑ ÿßŸÑÿßÿ≥ŸÖ

    res.status(200).json(plannings);
  } catch (err) {
    console.error('‚ùå Erreur lors de r√©cup√©ration de QrWeekPlanning:', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

app.post('/api/admin/fill-week', async (req, res) => {
  try {
    const jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
    const periodes = ['matin', 'soir'];
    const Cours = require('./models/coursModel');
const Professeur = require('./models/professeurModel');

    const QrWeekPlanning = require('./models/QrWeekPlanning');

    const coursList = await Cours.find();

    let count = 0;
    for (const cours of coursList) {
      const profNames = Array.isArray(cours.professeur) ? cours.professeur : [cours.professeur];

      // ÿ¨ŸÑÿ® ObjectId ŸÑÿ£ŸàŸÑ ÿ£ÿ≥ÿ™ÿßÿ∞ ŸÅŸä ÿßŸÑŸÇÿßÿ¶ŸÖÿ©
      const profDoc = await Professeur.findOne({ nom: profNames[0] });
      if (!profDoc) continue; // ÿ™ÿ¨ÿßŸáŸÑ ÿßŸÑÿØŸàÿ±ÿ© ÿ•ŸÜ ŸÑŸÖ ŸäŸàÿ¨ÿØ ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞

      for (const jour of jours) {
        for (const periode of periodes) {
          const existe = await QrWeekPlanning.findOne({ jour, periode, cours: cours.nom });
          if (!existe) {
            const plan = new QrWeekPlanning({
              jour,
              periode,
              cours: cours.nom,
              professeur: profDoc._id, // ‚úÖ ŸáŸÜÿß ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÄ ObjectId ÿßŸÑÿµÿ≠Ÿäÿ≠
              matiere: cours.nom
            });
            await plan.save();
            count++;
          }
        }
      }
    }

    res.status(200).json({ message: `‚úÖ ${count} ÿ™ÿÆÿ∑Ÿäÿ∑ ÿ£ÿ≥ÿ®ŸàÿπŸä ÿ™ŸÖ ÿ•ÿØÿÆÿßŸÑŸá ÿ®ŸÜÿ¨ÿßÿ≠` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ŸÖŸÑÿ° ÿ¨ÿØŸàŸÑ ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ' });
  }
});





app.post('/api/cours', authAdmin, async (req, res) => {
  try {
    let { nom, professeur } = req.body;

    // ‚úÖ ÿ™ÿ≠ŸàŸäŸÑ professeur ÿ•ŸÑŸâ ŸÖÿµŸÅŸàŸÅÿ© ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖÿµŸÅŸàŸÅÿ©
  if (!Array.isArray(professeur)) {
  professeur = professeur ? [professeur] : [];
}


    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπÿØŸÖ ÿ™ŸÉÿ±ÿßÿ± ÿßŸÑŸÉŸàÿ±ÿ≥
    const existe = await Cours.findOne({ nom });
    if (existe) return res.status(400).json({ message: 'Cours d√©j√† existant' });

    const cours = new Cours({
      nom,
      professeur, // ŸÖÿµŸÅŸàŸÅÿ© ŸÖŸÜ ÿßŸÑÿ£ÿ≥ŸÖÿßÿ°
      creePar: req.adminId
    });

    await cours.save();

    // ÿ™ÿ≠ÿØŸäÿ´ ŸÉŸÑ ÿ£ÿ≥ÿ™ÿßÿ∞ Ÿàÿ±ÿ®ÿ∑ ÿßŸÑŸÉŸàÿ±ÿ≥ ÿ®Ÿá
    for (const profNom of professeur) {
      const prof = await Professeur.findOne({ nom: profNom });
      if (prof && !prof.cours.includes(nom)) {
        prof.cours.push(nom);
        await prof.save();
      }
    }

    res.status(201).json(cours);
  } catch (err) {
    console.error('‚ùå Erreur ajout cours:', err);
    res.status(500).json({ error: err.message || 'Erreur inconnue c√¥t√© serveur' });
  }
});




// Mise √† jour de l'√©tat actif de l'√©tudiant
// ‚úÖ Basculer le statut actif d‚Äôun √©tudiant
app.patch('/api/etudiants/:id/actif', authAdmin, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.params.id);
    if (!etudiant) return res.status(404).json({ message: '√âtudiant non trouv√©' });

    etudiant.actif = !etudiant.actif;
    await etudiant.save();

    res.json(etudiant);
  } catch (err) {
    console.error('Erreur PATCH actif:', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

app.delete('/api/etudiants/:id', authAdmin, async (req, res) => {
  try {
    await Etudiant.findByIdAndDelete(req.params.id);
    res.json({ message: '√âtudiant supprim√©' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la suppression' });
  }
});
// ‚úÖ Obtenir un seul √©tudiant
app.get('/api/etudiants/:id', authAdmin, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.params.id);
    if (!etudiant) return res.status(404).json({ message: '√âtudiant non trouv√©' });
    res.json(etudiant);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
});
app.post('/api/evenements', authAdmin, async (req, res) => {
  try {
    const { titre, description, dateDebut, dateFin, type } = req.body;

    const evenement = new Evenement({
      titre,
      description,
      dateDebut: new Date(dateDebut),
      dateFin: dateFin ? new Date(dateFin) : new Date(dateDebut),
      type,
      creePar: req.adminId
    });

    await evenement.save();
    res.status(201).json(evenement);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.get('/api/evenements', authAdmin, async (req, res) => {
  try {
    const evenements = await Evenement.find().sort({ dateDebut: 1 });
    res.json(evenements);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// ‚úÖ Route pour modifier un √©v√©nement
app.put('/api/evenements/:id', authAdmin, async (req, res) => {
  try {
    const { titre, description, dateDebut, dateFin, type } = req.body;
    
    // V√©rifier que l'√©v√©nement existe
    const evenement = await Evenement.findById(req.params.id);
    if (!evenement) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    // Pr√©parer les donn√©es de mise √† jour
    const updateData = {
      titre,
      description,
      dateDebut: new Date(dateDebut),
      dateFin: dateFin ? new Date(dateFin) : new Date(dateDebut),
      type
    };

    // Mettre √† jour l'√©v√©nement
    const evenementModifie = await Evenement.findByIdAndUpdate(
      req.params.id, 
      updateData, 
      { new: true, runValidators: true }
    );

    console.log('‚úÖ √âv√©nement modifi√©:', evenementModifie);
    res.json(evenementModifie);
    
  } catch (err) {
    console.error('‚ùå Erreur lors de la modification:', err);
    res.status(500).json({ 
      message: 'Erreur lors de la modification de l\'√©v√©nement',
      error: err.message 
    });
  }
});

// ‚úÖ Route pour supprimer un √©v√©nement
app.delete('/api/evenements/:id', authAdmin, async (req, res) => {
  try {
    // V√©rifier que l'√©v√©nement existe
    const evenement = await Evenement.findById(req.params.id);
    if (!evenement) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    // Supprimer l'√©v√©nement
    await Evenement.findByIdAndDelete(req.params.id);
    
    console.log('‚úÖ √âv√©nement supprim√© avec l\'ID:', req.params.id);
    res.json({ 
      message: '√âv√©nement supprim√© avec succ√®s',
      evenementSupprime: {
        id: evenement._id,
        titre: evenement.titre
      }
    });
    
  } catch (err) {
    console.error('‚ùå Erreur lors de la suppression:', err);
    res.status(500).json({ 
      message: 'Erreur lors de la suppression de l\'√©v√©nement',
      error: err.message 
    });
  }
});

// ‚úÖ Route pour obtenir un seul √©v√©nement (optionnel - pour les d√©tails)
app.get('/api/evenements/:id', authAdmin, async (req, res) => {
  try {
    const evenement = await Evenement.findById(req.params.id).populate('creePar', 'nom email');
    
    if (!evenement) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    res.json(evenement);
    
  } catch (err) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', err);
    res.status(500).json({ 
      message: 'Erreur lors de la r√©cup√©ration de l\'√©v√©nement',
      error: err.message 
    });
  }
});
app.post('/api/qr-session/complete', authProfesseur, async (req, res) => {
  const { cours, dateSession, heure, periode, matiere, nomProfesseur } = req.body;

  try {
    // üßë‚Äçüéì ÿ¨ŸÑÿ® ŸÉŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿ© ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑŸÇÿ≥ŸÖ
    const etudiants = await Etudiant.find({ cours });

    // ‚úÖ ÿ¨ŸÑÿ® ÿßŸÑÿ≠ÿ∂Ÿàÿ± ÿßŸÑŸÖŸàÿ¨ŸàÿØ ŸÅÿπŸÑÿßŸã (ÿ£Ÿä ÿßŸÑÿ∞ŸäŸÜ ŸÇÿßŸÖŸàÿß ÿ®ŸÖÿ≥ÿ≠ ÿßŸÑŸÄ QR)
    const presencesExistantes = await Presence.find({
      cours,
      dateSession: new Date(dateSession),
      heure,
      periode
    });

    const idsDejaPresents = presencesExistantes.map(p => String(p.etudiant));

    // üü• ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßŸÑÿ∑ŸÑÿ®ÿ© ÿßŸÑÿ∞ŸäŸÜ ŸÑŸÖ Ÿäÿ≠ÿ∂ÿ±Ÿàÿß
    const absents = etudiants.filter(e => !idsDejaPresents.includes(String(e._id)));

    // üîÅ ÿ™ÿ≥ÿ¨ŸäŸÑ ŸÉŸÑ ÿ∑ÿßŸÑÿ® ŸÉÿ∫ÿßÿ¶ÿ®
    for (let etu of absents) {
      await Presence.create({
        etudiant: etu._id,
        cours,
        dateSession: new Date(dateSession),
        present: false,
        creePar: req.professeurId,
        heure,
        periode,
        matiere,
        nomProfesseur
      });
    }

    res.json({ message: `‚úÖ ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ∫Ÿäÿßÿ®: ${absents.length} ÿ∑ÿßŸÑÿ® ÿ∫ÿßÿ¶ÿ®` });

  } catch (err) {
    console.error('‚ùå ÿÆÿ∑ÿ£:', err);
    res.status(500).json({ error: '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ ÿ£ÿ´ŸÜÿßÿ° ÿ•ŸÉŸÖÿßŸÑ ÿßŸÑÿ≠ÿ∂Ÿàÿ±' });
  }
});

app.get('/api/professeur/presences', authProfesseur, async (req, res) => {
  const data = await Presence.find({ creePar: req.professeurId }).populate('etudiant', 'nomComplet');
  res.json(data);
});
app.get('/api/presences', authAdmin, async (req, res) => {
  try {
    const data = await Presence.find().populate('etudiant', 'nomComplet');
    res.json(data);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// middleware: authProfesseur Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ™ÿ≥ÿ™ÿπŸÖŸÑ
app.get('/api/professeur/etudiants', authProfesseur, async (req, res) => {
  try {
    const professeur = await Professeur.findById(req.professeurId);
    if (!professeur) {
      return res.status(404).json({ message: 'Pas de professeur' });
    }

    const etudiants = await Etudiant.find({
      cours: { $in: professeur.cours },
      actif: true
    }).select('-email -motDePasse'); // ‚úÖ exclure les champs sensibles

    res.json(etudiants);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

// üìÅ routes/professeur.js ÿ£Ÿà ÿ∂ŸÖŸÜ app.js ÿ•ÿ∞ÿß ŸÉŸÑ ÿ¥Ÿäÿ° ŸÅŸä ŸÖŸÑŸÅ Ÿàÿßÿ≠ÿØ
app.get('/api/professeur/presences', authProfesseur, async (req, res) => {
  try {
    const data = await Presence.find({ creePar: req.professeurId })
      .populate('etudiant', 'nomComplet telephone')
      .sort({ dateSession: -1 });

    res.json(data);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.get('/api/professeur/absences', authProfesseur, async (req, res) => {
  try {
    const absences = await Presence.find({
      creePar: req.professeurId,
      present: false
    }).populate('etudiant', 'nomComplet telephone');

    res.json(absences);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


// ‚úÖ ŸÅŸÇÿ∑ ÿßŸÑŸÉŸàÿ±ÿ≥ÿßÿ™ ÿßŸÑÿ™Ÿä ŸäÿØÿ±ÿ≥Ÿáÿß Ÿáÿ∞ÿß ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞
app.get('/api/professeur/mes-cours', authProfesseur, async (req, res) => {
  try {
    const professeur = await Professeur.findById(req.professeurId);
    if (!professeur) return res.status(404).json({ message: 'Professeur non trouv√©' });

    // ÿ¨ŸÑÿ® ÿßŸÑŸÉŸàÿ±ÿ≥ÿßÿ™ ÿßŸÑÿ™Ÿä ÿπŸÜÿØŸá ŸÅŸÇÿ∑
    const cours = await Cours.find({ professeur: professeur.nom }); // ÿ£Ÿà _id ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ObjectId
    res.json(cours);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post('/api/presences', authProfesseur, async (req, res) => {
  try {
    const { etudiant, cours, dateSession, present, remarque, heure, periode } = req.body;

    // ‚úÖ ÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ Ÿáÿ∞ÿß ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞ ŸäÿØÿ±Ÿëÿ≥ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿ±ÿ≥
    const prof = await Professeur.findById(req.professeurId);
    if (!prof.cours.includes(cours)) {
      return res.status(403).json({ message: '‚ùå Vous ne pouvez pas marquer la pr√©sence pour ce cours.' });
    }

    // ‚úÖ ÿ•ŸÜÿ¥ÿßÿ° ŸÉÿßÿ¶ŸÜ pr√©sence ÿ¨ÿØŸäÿØ ŸÖÿπ ÿßŸÑŸàŸÇÿ™ ŸàÿßŸÑŸÅÿ™ÿ±ÿ©
    const presence = new Presence({
      etudiant,
      cours,
      dateSession: new Date(dateSession),
      present,
      remarque,
      heure,    // üÜï ŸàŸÇÿ™ ÿßŸÑÿ≠ÿ∂Ÿàÿ± ÿ®ÿµŸäÿ∫ÿ© "08:30"
      periode,  // üÜï 'matin' ÿ£Ÿà 'soir'
      creePar: req.professeurId,
         matiere: prof.matiere,           // ‚úÖ ÿßŸÑŸÖÿßÿØÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ŸÖŸÜ ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞
      nomProfesseur: prof.nom   
    });

    await presence.save();
    res.status(201).json(presence);

  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


// Ajoutez ces routes √† votre app.js apr√®s les routes existantes

// ‚úÖ Route pour r√©cup√©rer toutes les notifications
// üîß API de notifications corrig√©e avec debug



// üîß Route de d√©bogage sp√©ciale
app.get('/api/debug/notifications', authAdmin, async (req, res) => {
  try {
    const aujourdHui = new Date();
    const debutMois = new Date(aujourdHui.getFullYear(), aujourdHui.getMonth(), 1);
    const finMois = new Date(aujourdHui.getFullYear(), aujourdHui.getMonth() + 1, 0);

    // √âtudiant sp√©cifique
    const etudiantId = "685dd93cdb5dd547333fe5bb";
    const etudiant = await Etudiant.findById(etudiantId);
    
    // Ses pr√©sences ce mois
    const presences = await Presence.find({
      etudiant: etudiantId,
      dateSession: { $gte: debutMois, $lte: finMois }
    });

    // Ses absences ce mois
    const absences = presences.filter(p => !p.present);

    res.json({
      etudiant: {
        nom: etudiant.nomComplet,
        actif: etudiant.actif,
        cours: etudiant.cours
      },
      periode: {
        debut: debutMois,
        fin: finMois
      },
      presences: {
        total: presences.length,
        presents: presences.filter(p => p.present).length,
        absents: absences.length,
        details: absences.map(p => ({
          date: p.dateSession,
          cours: p.cours,
          present: p.present
        }))
      },
      shouldTriggerNotification: absences.length >= 3
    });

  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ Route pour les statistiques du dashboard
app.get('/api/dashboard/stats', authAdmin, async (req, res) => {
  try {
    const aujourdHui = new Date();
    
    // Compter les √©tudiants actifs
    const etudiantsActifs = await Etudiant.countDocuments({ actif: true });
    
    // Compter les cours
    const totalCours = await Cours.countDocuments();
    
    // Paiements expir√©s ce mois
    const debutMois = new Date(aujourdHui.getFullYear(), aujourdHui.getMonth(), 1);
    const paiementsExpiresCount = await Paiement.aggregate([
      {
        $addFields: {
          dateFin: {
            $dateAdd: {
              startDate: "$moisDebut",
              unit: "month",
              amount: "$nombreMois"
            }
          }
        }
      },
      {
        $match: {
          dateFin: { $lt: aujourdHui }
        }
      },
      {
        $count: "total"
      }
    ]);
    
    // √âv√©nements cette semaine
    const finSemaine = new Date();
    finSemaine.setDate(finSemaine.getDate() + 7);
    const evenementsSemaine = await Evenement.countDocuments({
      dateDebut: { $gte: aujourdHui, $lte: finSemaine }
    });

    // Absences cette semaine
    const debutSemaine = new Date();
    debutSemaine.setDate(debutSemaine.getDate() - 7);
    const absencesSemaine = await Presence.countDocuments({
      dateSession: { $gte: debutSemaine, $lte: aujourdHui },
      present: false
    });

    res.json({
      etudiantsActifs,
      totalCours,
      paiementsExpires: paiementsExpiresCount[0]?.total || 0,
      evenementsSemaine,
      absencesSemaine,
      timestamp: new Date()
    });

  } catch (err) {
    console.error('‚ùå Erreur stats dashboard:', err);
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ Route pour marquer une notification comme lue (optionnel)
app.post('/api/notifications/:id/mark-read', authAdmin, (req, res) => {
  // Dans une vraie application, vous stockeriez l'√©tat "lu" en base
  // Pour l'instant, on retourne juste un succ√®s
  res.json({ message: 'Notification marqu√©e comme lue', id: req.params.id });
});
// üìÑ Route: GET /api/documents
// ŸÖÿ±ÿ¶Ÿäÿ© ŸÑŸÑÿ¨ŸÖŸäÿπ
app.get('/api/documents', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId);
    const documents = await Document.find({
      cours: { $in: etudiant.cours }
    }).sort({ dateAjout: -1 });

    res.json(documents);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

app.get('/api/professeur/documents', authProfesseur, async (req, res) => {
  try {
    const docs = await Document.find({ creePar: req.professeurId }).sort({ dateUpload: -1 });
    res.json(docs);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});app.delete('/api/documents/:id', authProfesseur, async (req, res) => {
  try {
    const documentId = req.params.id;
    const professeurId = req.professeurId; // ‚úÖ depuis le middleware authProfesseur

    // V√©rifier que le document appartient √† ce professeur
    const document = await Document.findOne({ 
      _id: documentId, 
      creePar: professeurId   // ‚úÖ champ correct
    });

    if (!document) {
      return res.status(404).json({ 
        message: 'Document non trouv√© ou acc√®s refus√©' 
      });
    }

    // ‚úÖ Optionnel: supprimer le fichier du dossier local (si n√©cessaire)
    // const fs = require('fs');
    // const filePath = path.join(__dirname, 'documents', path.basename(document.fichier));
    // if (fs.existsSync(filePath)) {
    //   fs.unlinkSync(filePath);
    // }

    // Supprimer le document de la base
    await Document.findByIdAndDelete(documentId);

    res.json({ message: '‚úÖ Document supprim√© avec succ√®s' });

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression:', error);
    res.status(500).json({ 
      message: 'Erreur serveur lors de la suppression', 
      error: error.message 
    });
  }
});



// ‚úÖ BACKEND: Retourne les cours de l'√©tudiant + leurs professeurs
app.get('/api/etudiant/mes-cours', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId);
    if (!etudiant) {
      return res.status(404).json({ message: '√âtudiant non trouv√©' });
    }

    const coursAvecProfs = await Promise.all(
      etudiant.cours.map(async (nomCours) => {
        const professeurs = await Professeur.find({ cours: nomCours })
          .select('_id nom matiere');
        return { nomCours, professeurs };
      })
    );

    res.status(200).json(coursAvecProfs);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
// ‚úÖ BACKEND: Envoi d'un exercice √† un prof sp√©cifique
app.post(
  '/api/etudiant/exercices',
  authEtudiant,
  exerciceUpload.single('fichier'),
  async (req, res) => {
    try {
      const { titre, cours, type, numero, professeurId } = req.body;

      // ‚úÖ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
      if (!titre || !cours || !type || !numero || !professeurId || !req.file) {
        return res.status(400).json({ message: 'Tous les champs sont requis.' });
      }

      // ‚úÖ ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜ ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞ ŸäÿØÿ±Ÿëÿ≥ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿ±ÿ≥
      const professeur = await Professeur.findById(professeurId);
      if (!professeur || !professeur.cours.includes(cours)) {
        return res.status(400).json({
          message: '‚ùå Le professeur s√©lectionn√© n\'enseigne pas ce cours.'
        });
      }

      // ‚úÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÖÿ±ŸäŸÜ
      const fichier = `/uploads/${req.file.filename}`;
      const exercice = new Exercice({
        titre,
        cours,
        type,
        numero,
        fichier,
        etudiant: req.etudiantId,
        professeur: professeurId
      });

      await exercice.save();
      res.status(201).json({
        message: '‚úÖ Exercice envoy√© avec succ√®s',
        exercice
      });
    } catch (err) {
      console.error('‚ùå Erreur envoi exercice:', err);
      res.status(500).json({
        message: '‚ùå Erreur lors de l\'envoi du devoir',
        error: err.message
      });
    }
  }
);


// DELETE - Supprimer un exercice (par l'√©tudiant sous 24h)
app.delete('/api/etudiant/exercices/:id', authEtudiant, async (req, res) => {
  try {
    const exercice = await Exercice.findOne({ _id: req.params.id, etudiant: req.etudiantId });

    if (!exercice) {
      return res.status(404).json({ message: 'Exercice introuvable' });
    }

    const maintenant = new Date();
    const diffHeures = (maintenant - exercice.dateEnvoi) / (1000 * 60 * 60);

    if (diffHeures > 24) {
      return res.status(403).json({ message: '‚õî Impossible de supprimer apr√®s 24h' });
    }

    // Optionnel : supprimer fichier physique
    const fs = require('fs');
    if (fs.existsSync(`.${exercice.fichier}`)) {
      fs.unlinkSync(`.${exercice.fichier}`);
    }

    await exercice.deleteOne();
    res.json({ message: '‚úÖ Exercice supprim√© avec succ√®s' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur suppression', error: err.message });
  }
});

// ‚úÖ Route pour obtenir le nombre de notifications non lues
app.get('/api/notifications/unread-count', authAdmin, async (req, res) => {
  try {
    // Cette route utilise la m√™me logique que /api/notifications
    // mais retourne seulement le nombre
    const notifications = [];
    const aujourdHui = new Date();
    
    // Paiements expir√©s et expirant
    const paiements = await Paiement.find()
      .populate('etudiant', 'nomComplet actif')
      .sort({ moisDebut: -1 });

    const latestPaiementMap = new Map();
    for (const p of paiements) {
      const key = `${p.etudiant?._id}_${p.cours}`;
      if (!latestPaiementMap.has(key)) {
        latestPaiementMap.set(key, p);
      }
    }

    for (const paiement of latestPaiementMap.values()) {
      if (!paiement.etudiant?.actif) continue;
      const debut = new Date(paiement.moisDebut);
      const fin = new Date(debut);
      fin.setMonth(fin.getMonth() + Number(paiement.nombreMois));
      const joursRestants = Math.ceil((fin - aujourdHui) / (1000 * 60 * 60 * 24));

      if (joursRestants < 0 || joursRestants <= 7) {
        notifications.push({ type: 'payment' });
      }
    }

    // Absences r√©p√©t√©es
    const debutMois = new Date(aujourdHui.getFullYear(), aujourdHui.getMonth(), 1);
    const presences = await Presence.find({
      dateSession: { $gte: debutMois, $lte: aujourdHui },
      present: false
    }).populate('etudiant', 'nomComplet actif');

    const absencesParEtudiant = {};
    for (const presence of presences) {
      if (!presence.etudiant?.actif) continue;
      const etudiantId = presence.etudiant._id.toString();
      absencesParEtudiant[etudiantId] = (absencesParEtudiant[etudiantId] || 0) + 1;
    }

    for (const count of Object.values(absencesParEtudiant)) {
      if (count >= 3) {
        notifications.push({ type: 'absence' });
      }
    }

    // √âv√©nements √† venir
    const dans7jours = new Date();
    dans7jours.setDate(dans7jours.getDate() + 7);
    const evenements = await Evenement.find({
      dateDebut: { $gte: aujourdHui, $lte: dans7jours }
    });

    notifications.push(...evenements.map(() => ({ type: 'event' })));

    res.json({ count: notifications.length });

  } catch (err) {
    console.error('‚ùå Erreur unread count:', err);
    res.status(500).json({ error: err.message });
  }
});
// ‚úÖ Route pour supprimer une notification
app.delete('/api/notifications/:id', authAdmin, async (req, res) => {
  try {
    const notificationId = req.params.id;
    
    console.log("üóëÔ∏è Tentative de suppression notification:", notificationId);
    
    // √âtant donn√© que les notifications sont g√©n√©r√©es dynamiquement,
    // nous devons les stocker temporairement ou utiliser une autre approche
    
    // OPTION 1: Stockage temporaire en m√©moire (simple mais limit√©)
    if (!global.deletedNotifications) {
      global.deletedNotifications = new Set();
    }
    
    // Ajouter l'ID √† la liste des notifications supprim√©es
    global.deletedNotifications.add(notificationId);
    
    console.log("‚úÖ Notification marqu√©e comme supprim√©e:", notificationId);
    console.log("üìã Total notifications supprim√©es:", global.deletedNotifications.size);
    
    res.json({ 
      message: 'Notification supprim√©e avec succ√®s',
      id: notificationId,
      success: true
    });

  } catch (err) {
    console.error('‚ùå Erreur suppression notification:', err);
    res.status(500).json({ 
      error: 'Erreur lors de la suppression de la notification',
      details: err.message 
    });
  }
});

// ‚úÖ Modifier la route GET notifications pour exclure les notifications supprim√©es

// üîí GET /api/professeur/exercices/:cours
app.get('/api/professeur/exercices/:cours', authProfesseur, async (req, res) => {
  try {
    const { cours } = req.params;

    // ‚úÖ ÿ¨ŸÑÿ® ÿßŸÑÿ™ŸÖÿßÿ±ŸäŸÜ ŸÅŸÇÿ∑ ÿßŸÑÿ™Ÿä ÿ£Ÿèÿ±ÿ≥ŸÑÿ™ ŸÑŸáÿ∞ÿß ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞
    const exercices = await Exercice.find({ 
      cours, 
      professeur: req.professeurId // ‚úÖ Ÿáÿ∞ÿß ŸáŸà ÿßŸÑŸÅÿ±ŸÇ
    }).populate('etudiant', 'nomComplet email');

    res.json(exercices);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route GET ‚Äì Etudiant voir ses propres exercices
app.get('/api/etudiant/mes-exercices', authEtudiant, async (req, res) => {
  try {
    const exercices = await Exercice.find({ etudiant: req.etudiantId })
      .populate('professeur', 'nom matiere') // ‚úÖ ÿ•ÿ∏Ÿáÿßÿ± ÿßÿ≥ŸÖ ŸàŸÖÿßÿØÿ© ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞
      .sort({ dateUpload: -1 });

    res.json(exercices);
  } catch (error) {
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
});


// üîí PUT /api/professeur/exercices/:id/remarque
app.put('/api/professeur/exercices/:id/remarque', authProfesseur, async (req, res) => {
  try {
    const { remarque } = req.body;
    const { id } = req.params;

    const exercice = await Exercice.findByIdAndUpdate(
      id,
      { remarque },
      { new: true }
    );

    if (!exercice) return res.status(404).json({ message: 'Exercice non trouv√©' });

    res.json({ message: '‚úÖ Remarque ajout√©e', exercice });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

app.get('/api/live/:cours', authProfesseur, (req, res) => {
  const { cours } = req.params;
  const lien = genererLienLive(cours);
  res.json({ lien });
});
app.delete('/api/cours/:id', authAdmin, async (req, res) => {
  try {
    const coursId = req.params.id;

    const cours = await Cours.findById(coursId);
    if (!cours) {
      return res.status(404).json({ message: 'Cours non trouv√©' });
    }

    // ‚úÖ Supprimer le cours de la base
    await Cours.findByIdAndDelete(coursId);

    // ‚úÖ Supprimer le nom du cours chez tous les √©tudiants
    await Etudiant.updateMany(
      { cours: cours.nom },
      { $pull: { cours: cours.nom } }
    );

    // ‚úÖ Supprimer le nom du cours chez tous les professeurs
    await Professeur.updateMany(
      { cours: cours.nom },
      { $pull: { cours: cours.nom } }
    );

    res.json({ message: `‚úÖ Cours "${cours.nom}" supprim√© avec succ√®s` });
  } catch (err) {
    res.status(500).json({ message: '‚ùå Erreur lors de la suppression', error: err.message });
  }
});



// ‚úÖ Route pour vider la liste des notifications supprim√©es (optionnel - pour admin)

app.post('/api/contact/send', async (req, res) => {
  try {
    const newMessage = new ContactMessage(req.body);
    await newMessage.save();
    res.status(201).json({ message: '‚úÖ Message envoy√© avec succ√®s' });
  } catch (err) {
    console.error('‚ùå Erreur enregistrement message:', err);
    res.status(500).json({ message: '‚ùå Erreur serveur' });
  }
});

// üîê Route prot√©g√©e - vue admin
app.get('/api/admin/contact-messages', authAdmin, async (req, res) => {
  try {
    const messages = await ContactMessage.find().sort({ date: -1 });
    res.status(200).json(messages);
  } catch (err) {
    console.error('‚ùå Erreur r√©cup√©ration messages:', err);
    res.status(500).json({ message: '‚ùå Erreur serveur' });
  }
});
app.delete('/api/admin/contact-messages/:id', authAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    const deleted = await ContactMessage.findByIdAndDelete(id);
    if (!deleted) {
      return res.status(404).json({ message: '‚ùå Message non trouv√©' });
    }

    res.status(200).json({ message: '‚úÖ Message supprim√© avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur suppression message:', error);
    res.status(500).json({ message: '‚ùå Erreur serveur' });
  }
});

app.post('/api/admin/qr-week-bulk', async (req, res) => {
  try {
    const { planning } = req.body;

    if (!Array.isArray(planning) || planning.length === 0) {
      return res.status(400).json({ message: 'Donn√©es de planning manquantes' });
    }

    const results = [];

    for (const item of planning) {
      const { jour, periode, cours, matiere, professeur, horaire } = item;

      // ‚úÖ V√©rifie que tout est bien fourni, y compris `horaire`
      if (!jour || !periode || !cours || !matiere || !professeur || !horaire) {
        continue; // Ignore les lignes incompl√®tes
      }

      const existe = await QrWeekPlanning.findOne({
        jour,
        periode,
        cours,
      });

      if (existe) {
        existe.matiere = matiere;
        existe.professeur = professeur;
        existe.horaire = horaire; // ‚úÖ met √† jour aussi l‚Äôhoraire
        await existe.save();
        results.push({ updated: existe._id });
      } else {
        const nouv = new QrWeekPlanning({
          jour,
          periode,
          cours,
          matiere,
          professeur,
          horaire // ‚úÖ nouveau champ
        });
        await nouv.save();
        results.push({ created: nouv._id });
      }
    }

    res.status(201).json({ message: '‚úÖ Planning enregistr√© avec succ√®s', details: results });
  } catch (err) {
    console.error('‚ùå Erreur bulk qr-week:', err);
    res.status(500).json({ message: '‚ùå Erreur serveur lors de l‚Äôenregistrement du planning' });
  }
});


app.post('/api/qretudiant', authEtudiant, async (req, res) => {
  try {
    const etudiant = req.user;

    const niveau = Array.isArray(etudiant.cours) ? etudiant.cours[0] : etudiant.cours;

    const { date, periode } = req.body;

    if (!date || !periode) {
      return res.status(400).json({ message: 'Date et p√©riode requises' });
    }

    const session = await QrSession.findOne({
      date,
      periode,
      cours: niveau // ÿßŸÑŸÖŸÇÿßÿ±ŸÜÿ© ŸáŸÜÿß ÿ≠ÿ≥ÿ® ÿ£ŸàŸÑ ŸÖÿ≥ÿ™ŸàŸâ ŸÅŸÇÿ∑
    });

    if (!session) {
      return res.status(404).json({ message: 'Aucune session trouv√©e pour ce niveau' });
    }

    res.status(200).json({ message: 'Session trouv√©e', session });

  } catch (err) {
    console.error('Erreur dans /api/qretudiant:', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

// backend/app.js ou routes/admin.js

app.post('/api/etudiant/qr-presence', authEtudiant, async (req, res) => {
  try {
    const { date, periode, cours, horaire } = req.body;

    // ‚úÖ ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÖÿπÿ∑Ÿäÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
    if (!date || !periode || !cours || !horaire) {
      return res.status(400).json({ message: '‚ùå QR invalide - donn√©es manquantes' });
    }

    const now = new Date();
    const heureActuelle = now.toTimeString().slice(0, 5); // "14:25"

    // ‚úÖ ÿßÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ¨ŸÑÿ≥ÿ© ŸÅŸä QrSession
    const session = await QrSession.findOne({ date, periode, cours, horaire }).populate('professeur');

    if (!session) {
      return res.status(404).json({ message: '‚ùå QR session non trouv√©e pour ce cours et horaire' });
    }

    // ‚úÖ ÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿ™ŸàŸÇŸäÿ™ ÿßŸÑÿ≠ÿßŸÑŸä ÿØÿßÿÆŸÑ ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ÿßŸÑÿ≤ŸÖŸÜŸäÿ©
    const [startHour, endHour] = horaire.split('-'); // Exemple: '08:00', '10:00'
    if (heureActuelle < startHour || heureActuelle > endHour) {
      return res.status(400).json({
        message: `‚õî Vous √™tes hors de la plage horaire autoris√©e (${horaire})`
      });
    }

    // ‚úÖ ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ∑ÿßŸÑÿ®
    const etudiant = await Etudiant.findById(req.etudiantId);
    if (!etudiant) return res.status(404).json({ message: '‚ùå √âtudiant introuvable' });

    const niveauEtudiant = Array.isArray(etudiant.cours) ? etudiant.cours[0] : etudiant.cours;
    if (!niveauEtudiant || niveauEtudiant !== cours) {
      return res.status(403).json({ message: `‚ùå Ce QR n'est pas destin√© √† votre niveau (${cours})` });
    }

    // ‚úÖ ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπÿØŸÖ ÿ™ŸÉÿ±ÿßÿ± ÿßŸÑÿ≠ÿ∂Ÿàÿ± ŸÅŸä ŸÜŸÅÿ≥ ÿßŸÑÿ™ŸàŸÇŸäÿ™
    const dejaPresente = await Presence.findOne({
      etudiant: etudiant._id,
      cours: niveauEtudiant,
      dateSession: date,
      periode,
      heure: horaire // ŸÑÿßÿ≤ŸÖ ÿ™ÿ®ÿ≠ÿ´ ÿ®ŸÜŸÅÿ≥ `horaire`!
    });

    if (dejaPresente) {
      return res.status(400).json({ message: '‚ö†Ô∏è Pr√©sence d√©j√† enregistr√©e pour ce cr√©neau horaire' });
    }

    // ‚úÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ∂Ÿàÿ±
    const presence = new Presence({
      etudiant: etudiant._id,
      cours: niveauEtudiant,
      dateSession: date,
      periode,
heure: horaire, // ‚úÖ ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ™ŸàŸÇŸäÿ™ ÿßŸÑÿ±ÿ≥ŸÖŸä ŸÑŸÑÿ¨ŸÑÿ≥ÿ©
      present: true,
      remarque: 'QR auto',
      matiere: session.matiere || 'Non sp√©cifi√©e',
      nomProfesseur: session.professeur?.nom || session.professeur?.nomComplet || 'Non sp√©cifi√©',
      creePar: session.professeur?._id || null
    });

    await presence.save();

    res.status(201).json({ message: '‚úÖ Pr√©sence enregistr√©e avec succ√®s', presence });

  } catch (error) {
    console.error('‚ùå Erreur dans qr-presence:', error);
    res.status(500).json({ message: '‚ùå Erreur serveur' });
  }
});


// ‚úÖ Route: Supprimer toutes les QR sessions d'un jour donn√©
app.delete('/api/admin/qr-day-delete', authAdmin, async (req, res) => {
  try {
    const { date } = req.body;
    if (!date) {
      return res.status(400).json({ message: '‚ùå Date requise pour supprimer les sessions QR' });
    }

    // ‚úÖ Supprimer les sessions QR de ce jour
    const deleted = await QrSession.deleteMany({ date });

    // (Optionnel) Supprimer aussi les pr√©sences associ√©es √† ce jour
    // await Presence.deleteMany({ dateSession: date });

    res.status(200).json({ message: `‚úÖ ${deleted.deletedCount} sessions QR supprim√©es pour ${date}` });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des QR sessions:', error);
    res.status(500).json({ message: '‚ùå Erreur serveur lors de la suppression' });
  }
});

// ‚úÖ Route: R√©cup√©rer toutes les sessions QR planifi√©es pour une date donn√©e
app.get('/api/admin/qr-day-sessions', authAdmin, async (req, res) => {
  try {
    const { date } = req.query;
    if (!date) {
      return res.status(400).json({ message: '‚ùå Date requise pour obtenir les sessions' });
    }

    const qrSessions = await QrSession.find({ date }).populate('professeur');
    res.status(200).json({ qrSessions });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des sessions QR:', error);
    res.status(500).json({ message: '‚ùå Erreur serveur' });
  }
});

// Modifier une session individuelle
app.put('/api/admin/qr-session/:id', authAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { matiere, professeur, periode, horaire } = req.body;
    
    const session = await QrSession.findByIdAndUpdate(id, {
      matiere,
      professeur,
      periode,
      horaire
    }, { new: true });
    
    if (!session) {
      return res.status(404).json({ message: 'Session non trouv√©e' });
    }
    
    res.json({ message: 'Session modifi√©e avec succ√®s', session });
  } catch (error) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

// Supprimer une session individuelle
app.delete('/api/admin/qr-session/:id', authAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const session = await QrSession.findByIdAndDelete(id);
    
    if (!session) {
      return res.status(404).json({ message: 'Session non trouv√©e' });
    }
    
    res.json({ message: 'Session supprim√©e avec succ√®s' });
  } catch (error) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
});


// üîî ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞ - ÿßŸÑÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑŸÇÿßÿØŸÖÿ© ŸÅŸÇÿ∑
app.get('/api/professeur/notifications', authProfesseur, async (req, res) => {
  try {
    const notifications = [];

    const aujourdHui = new Date();
    const dans7jours = new Date();
    dans7jours.setDate(aujourdHui.getDate() + 7);

    const evenements = await Evenement.find({
      dateDebut: { $gte: aujourdHui, $lte: dans7jours }
    }).sort({ dateDebut: 1 });

    for (const e of evenements) {
      const joursRestants = Math.ceil((new Date(e.dateDebut) - aujourdHui) / (1000 * 60 * 60 * 24));

      notifications.push({
        id: `event_${e._id}`,
        title: `üìÖ ${e.titre}`,
        message:
          joursRestants === 0
            ? `üìå Aujourd'hui: ${e.titre}`
            : `‚è≥ Dans ${joursRestants} jour(s): ${e.titre}`,
        date: e.dateDebut
      });
    }

    res.json(notifications);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir la liste des notifications supprim√©es (debug)
app.get('/api/notifications/deleted', authAdmin, (req, res) => {
  try {
    if (!global.deletedNotifications) {
      global.deletedNotifications = new Set();
    }
    
    res.json({
      deletedNotifications: Array.from(global.deletedNotifications),
      count: global.deletedNotifications.size
    });

  } catch (err) {
    console.error('‚ùå Erreur get deleted notifications:', err);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration',
      details: err.message 
    });
  }
});
// route: POST /api/professeurs
// accessible uniquement par Admin
app.post('/api/professeurs', authAdmin, upload.single('image'), async (req, res) => {
  try {
    const {
      nom,
      email,
      motDePasse,
      cours,
      telephone,
      dateNaissance,
      actif,
      genre,
      matiere
    } = req.body;

    // üîê V√©rification email unique
    const existe = await Professeur.findOne({ email });
    if (existe) return res.status(400).json({ message: 'üìß Cet email est d√©j√† utilis√©' });

    // ‚úÖ V√©rification genre
    if (!['Homme', 'Femme'].includes(genre)) {
      return res.status(400).json({ message: 'üö´ Genre invalide. Doit √™tre Homme ou Femme' });
    }

    // ‚úÖ Mati√®re obligatoire
    if (!matiere || matiere.trim() === '') {
      return res.status(400).json({ message: 'üö´ La mati√®re est requise' });
    }

    // üñºÔ∏è Image
    const imagePath = req.file ? `/uploads/${req.file.filename}` : '';

    // üìÖ Date de naissance
    const date = dateNaissance ? new Date(dateNaissance) : null;

    // üîê Hash mot de passe
    const hashed = await bcrypt.hash(motDePasse, 10);

    // ‚úÖ Convertir actif en bool√©en
    const actifBool = actif === 'true' || actif === true;

    // üì¶ Cr√©er le professeur
    const professeur = new Professeur({
      nom,
      email,
      motDePasse: hashed,
      genre,
      telephone,
      dateNaissance: date,
      image: imagePath,
      actif: actifBool,
      cours,
      matiere
    });

    await professeur.save();

    // ‚úÖ Utiliser le nom r√©ellement sauvegard√© (au cas o√π il a √©t√© format√© par mongoose)
    const nomProf = professeur.nom;

    // üîÅ Mettre √† jour chaque Cours pour y inclure ce professeur
    if (Array.isArray(cours)) {
      for (const coursNom of cours) {
        const coursDoc = await Cours.findOne({ nom: coursNom });
        if (coursDoc && !coursDoc.professeur.includes(nomProf)) {
          coursDoc.professeur.push(nomProf);
          await coursDoc.save();
        }
      }
    }

    res.status(201).json({
      message: '‚úÖ Professeur cr√©√© avec succ√®s',
      professeur
    });

  } catch (err) {
    console.error('‚ùå Erreur lors de la cr√©ation du professeur:', err);
    res.status(500).json({ message: '‚ùå Erreur serveur', error: err.message });
  }
});

app.post('/api/seances', authAdmin, async (req, res) => {
  try {
    // ‚úÖ AJOUT: Inclure matiere et salle dans la destructuration
    const { jour, heureDebut, heureFin, cours, professeur, matiere, salle } = req.body;

    // Validation rapide
    if (!jour || !heureDebut || !heureFin || !cours || !professeur) {
      return res.status(400).json({ message: 'Tous les champs sont requis' });
    }

    // ‚úÖ R√©cup√©rer le nom du cours √† partir de l'ID
    const coursDoc = await Cours.findById(cours);
    if (!coursDoc) {
      return res.status(404).json({ message: 'Cours non trouv√©' });
    }

    const seance = new Seance({
      jour,
      heureDebut,
      heureFin,
      cours: coursDoc.nom, // ‚úÖ Utiliser le nom du cours au lieu de l'ID
      professeur,
      matiere: matiere || '', // ‚úÖ IMPORTANT: Inclure la mati√®re
      salle: salle || '' // ‚úÖ IMPORTANT: Inclure la salle
    });

    await seance.save();

    res.status(201).json({ message: 'S√©ance ajout√©e avec succ√®s', seance });
  } catch (err) {
    console.error('Erreur ajout s√©ance:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// Route pour modifier une s√©ance - CORRIG√âE
app.put('/api/seances/:id', authAdmin, async (req, res) => {
  try {
    // ‚úÖ AJOUT: Inclure matiere et salle dans la destructuration
    const { jour, heureDebut, heureFin, cours, professeur, matiere, salle } = req.body;

    // ‚úÖ R√©cup√©rer le nom du cours √† partir de l'ID
    const coursDoc = await Cours.findById(cours);
    if (!coursDoc) {
      return res.status(404).json({ message: 'Cours non trouv√©' });
    }

    const seance = await Seance.findByIdAndUpdate(
      req.params.id,
      {
        jour,
        heureDebut,
        heureFin,
        cours: coursDoc.nom, // ‚úÖ Utiliser le nom du cours
        professeur,
        matiere: matiere || '', // ‚úÖ IMPORTANT: Inclure la mati√®re
        salle: salle || '' // ‚úÖ IMPORTANT: Inclure la salle
      },
      { new: true }
    );

    if (!seance) {
      return res.status(404).json({ message: 'S√©ance non trouv√©e' });
    }

    res.json({ message: 'S√©ance modifi√©e avec succ√®s', seance });
  } catch (err) {
    console.error('Erreur modification s√©ance:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// Route pour r√©cup√©rer toutes les s√©ances (pour admin) - INCHANG√âE
app.get('/api/seances', authAdmin, async (req, res) => {
  try {
    const seances = await Seance.find()
      .populate('professeur', 'nom')
      .sort({ jour: 1, heureDebut: 1 });

    res.json(seances);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// Route pour r√©cup√©rer les s√©ances pour les √©tudiants - MODIFI√âE
app.get('/api/seances/etudiant', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId);
    const coursNoms = etudiant.cours; // Array de strings comme ['france', 'ji']

    // ‚úÖ Chercher les s√©ances par nom de cours au lieu d'ID
    const seances = await Seance.find({ cours: { $in: coursNoms } })
      .populate('professeur', 'nom')
      .sort({ jour: 1, heureDebut: 1 });

    res.json(seances);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});




app.get('/api/seances/professeur', authProfesseur, async (req, res) => {
  try {
    const seances = await Seance.find({ professeur: req.professeurId })
      .populate('professeur', 'nom') // Populate le professeur pour avoir le nom
      .sort({ jour: 1, heureDebut: 1 });

    res.json(seances);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
// route: POST /api/professeurs/login
app.post('/api/professeurs/login', async (req, res) => {
  try {
    const { email, motDePasse } = req.body;
    const professeur = await Professeur.findOne({ email });
    if (!professeur) return res.status(404).json({ message: 'Professeur non trouv√©' });

    const isValid = await professeur.comparePassword(motDePasse);
    if (!isValid) return res.status(401).json({ message: 'Mot de passe incorrect' });

    const token = jwt.sign({ id: professeur._id, role: 'prof' }, 'jwt_secret_key', { expiresIn: '7d' });

    res.json({ professeur, token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



app.put('/api/professeurs/:id', authAdmin, upload.single('image'), async (req, res) => {
  try {
    const professeurId = req.params.id;
    const {
      nom,
      genre,
      dateNaissance,
      telephone,
      email,
      motDePasse,
      actif,
      matiere // ‚úÖ nouvelle propri√©t√©
    } = req.body;

    let cours = req.body.cours;

    // üß† S'assurer que cours est un tableau
    if (!cours) cours = [];
    if (typeof cours === 'string') cours = [cours];

    // üîç R√©cup√©rer les anciens cours du professeur
    const ancienProf = await Professeur.findById(professeurId);
    if (!ancienProf) return res.status(404).json({ message: "Professeur introuvable" });

    const ancienCours = ancienProf.cours || [];

    // ‚ûñ Cours supprim√©s
    const coursSupprimes = ancienCours.filter(c => !cours.includes(c));
    // ‚ûï Cours ajout√©s
    const coursAjoutes = cours.filter(c => !ancienCours.includes(c));

    // üßº Retirer le prof des cours supprim√©s
    for (const coursNom of coursSupprimes) {
      await Cours.updateOne(
        { nom: coursNom },
        { $pull: { professeur: ancienProf.nom } }
      );
    }

    // üß© Ajouter le prof dans les cours ajout√©s
    for (const coursNom of coursAjoutes) {
      await Cours.updateOne(
        { nom: coursNom },
        { $addToSet: { professeur: nom } }
      );
    }

    // üõ†Ô∏è Donn√©es √† mettre √† jour
    const updateData = {
      nom,
      genre,
      dateNaissance: new Date(dateNaissance),
      telephone,
      email,
      cours,
      matiere, // ‚úÖ ajout ici
      actif: actif === 'true' || actif === true
    };

    // üì∑ Gestion de l'image
    if (req.file) {
      updateData.image = `/uploads/${req.file.filename}`;
    }

    // üîê Mot de passe s'il est modifi√©
    if (motDePasse && motDePasse.trim() !== '') {
      updateData.motDePasse = await bcrypt.hash(motDePasse, 10);
    }

    // ‚úÖ Mise √† jour du professeur
    const updatedProf = await Professeur.findByIdAndUpdate(
      professeurId,
      updateData,
      { new: true, runValidators: true }
    ).select('-motDePasse');

    res.json({ message: "‚úÖ Professeur modifi√© avec succ√®s", professeur: updatedProf });

  } catch (err) {
    console.error('‚ùå Erreur lors de la modification:', err);
    res.status(500).json({ message: "Erreur lors de la modification", error: err.message });
  }
});


// routes/professeurs.js
app.patch('/api/professeurs/:id/actif', authAdmin, async (req, res) => {
  try {
    const prof = await Professeur.findById(req.params.id);
    if (!prof) return res.status(404).json({ message: 'Professeur introuvable' });

    prof.actif = !prof.actif;
    await prof.save();

    res.json(prof); // ‚úÖ ŸÜÿ±ÿ¨ÿπ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞ ÿßŸÑŸÖÿ≠ÿØÿ´ÿ©
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
app.get('/api/etudiant/profile', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId).select('-motDePasse'); // ‚úÖ ŸáŸÜÿß ÿßŸÑÿ™ÿπÿØŸäŸÑ
    if (!etudiant) return res.status(404).json({ message: '√âtudiant introuvable' });
    res.json(etudiant);
  } catch (err) {
    res.status(500).json({ message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä', error: err.message });
  }
});


// ‚úÖ üü¢ ÿ¨ŸÑÿ≥ÿßÿ™ ÿßŸÑÿ≠ÿ∂Ÿàÿ±
app.get('/api/etudiant/presences', authEtudiant, async (req, res) => {
  try {
    const presences = await Presence.find({ etudiant: req.etudiantId, present: true });
    res.json(presences);
  } catch (err) {
    res.status(500).json({ message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿ∂Ÿàÿ±', error: err.message });
  }
});


// ‚úÖ üî¥ ÿßŸÑÿ∫Ÿäÿßÿ®ÿßÿ™
app.get('/api/etudiant/absences', authEtudiant, async (req, res) => {
  try {
    const absences = await Presence.find({ etudiant: req.etudiantId, present: false });
    res.json(absences);
  } catch (err) {
    res.status(500).json({ message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∫Ÿäÿßÿ®ÿßÿ™', error: err.message });
  }
});


// ‚úÖ üí∞ ÿßŸÑÿØŸÅÿπÿßÿ™
app.get('/api/etudiant/paiements', authEtudiant, async (req, res) => {
  try {
    const paiements = await Paiement.find({ etudiant: req.etudiantId });
    res.json(paiements);
  } catch (err) {
    res.status(500).json({ message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿØŸÅÿπÿßÿ™', error: err.message });
  }
});



app.delete('/api/professeurs/:id', authAdmin, async (req, res) => {
  try {
    await Professeur.findByIdAndDelete(req.params.id);
    res.json({ message: 'Professeur supprim√© avec succ√®s' });
  } catch (err) {
    console.error('‚ùå Erreur suppression:', err);
    res.status(500).json({ message: 'Erreur lors de la suppression', error: err.message });
  }
});

app.get('/api/presences/:etudiantId', authAdmin, async (req, res) => {
  try {
    const result = await Presence.find({ etudiant: req.params.etudiantId }).sort({ dateSession: -1 });
    res.json(result);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.get('/api/presences/etudiant/:id', authAdmin, async (req, res) => {
  try {
    const presences = await Presence.find({ etudiant: req.params.id }).sort({ dateSession: -1 });
    res.json(presences);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// ‚úÖ Modifier un √©tudiant
app.put('/api/etudiants/:id', authAdmin, upload.single('image'), async (req, res) => {
  try {
    const { nomComplet, genre, dateNaissance, telephone, email, motDePasse, actif } = req.body;
    let cours = req.body.cours;
    if (typeof cours === 'string') cours = [cours];
    const actifBool = actif === 'true' || actif === true;

    const updateData = {
      nomComplet,
      genre,
      dateNaissance: new Date(dateNaissance),
      telephone,
      email,
      cours,
      actif: actifBool
    };

    // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ±ŸÅÿπ ÿµŸàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©
    if (req.file) {
      updateData.image = `/uploads/${req.file.filename}`;
    }

    // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ•ÿØÿÆÿßŸÑ ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿ¨ÿØŸäÿØÿ©
    if (motDePasse && motDePasse.trim() !== '') {
      const bcrypt = require('bcryptjs');
      updateData.motDePasse = await bcrypt.hash(motDePasse, 10);
    }

    const updated = await Etudiant.findByIdAndUpdate(req.params.id, updateData, {
      new: true,
      runValidators: true
    }).select('-motDePasse'); // ‚ùå ŸÑÿß ŸÜÿ±ÿ¨ÿπ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÅŸä ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©

    res.json(updated);
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la mise √† jour', error: err.message });
  }
});

// Lister les cours
// R√©cup√©rer un seul cours avec d√©tails
// üìå Route: GET /api/cours/:id
// ‚úÖ Lister tous les cours (IMPORTANT!)
app.get('/api/cours', authAdmin, async (req, res) => {
  try {
    const cours = await Cours.find();
    res.json(cours);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// routes/professeur.js ÿ£Ÿà ŸÅŸä ŸÖŸÑŸÅ Express ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
app.get('/api/admin/professeurs-par-cours/:coursNom', async (req, res) => {
  try {
    const coursNom = req.params.coursNom;

    const profs = await Professeur.find({ cours: coursNom }).select('_id nom matiere');
    res.json(profs);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
});
app.get('/api/professeur/profile', authProfesseur, async (req, res) => {
  try {
    const professeur = await Professeur.findById(req.professeurId).select('-motDePasse');
    if (!professeur) return res.status(404).json({ message: 'Professeur introuvable' });
    res.json(professeur);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});


app.get('/api/cours/:id', authAdmin, async (req, res) => {
  try {
    const cours = await Cours.findById(req.params.id).populate('creePar', 'nom email');
    if (!cours) return res.status(404).json({ message: 'Cours introuvable' });
    res.json(cours);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.get('/api/professeurs', authAdmin, async (req, res) => {
  try {
    const professeurs = await Professeur.find().sort({ createdAt: -1 });
    res.json(professeurs);
  } catch (err) {
    console.error('‚ùå Erreur lors de l\'affichage des professeurs:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
// Enhanced API route with pagination
app.get('/api/actualites', async (req, res) => {
  try {
    const { category, search, sortBy, page = 1, limit = 5 } = req.query;

    let query = {};
    if (category && category !== 'all') {
      query.category = category;
    }
    if (search) {
      query.$or = [
        { title: new RegExp(search, 'i') },
        { excerpt: new RegExp(search, 'i') },
        { tags: { $in: [new RegExp(search, 'i')] } }
      ];
    }

    // Calculate pagination
    const skip = (parseInt(page) - 1) * parseInt(limit);
    
    // Get total count for pagination
    const total = await Actualite.countDocuments(query);
    
    // Fetch actualit√©s with pagination
    const actualites = await Actualite.find(query)
      .sort({ isPinned: -1, date: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    res.json({
      actualites,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(total / parseInt(limit)),
        totalItems: total,
        hasNext: skip + actualites.length < total,
        hasPrev: parseInt(page) > 1
      }
    });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
app.post('/api/actualites', authAdmin, upload.single('image'), async (req, res) => {
  try {
    const { title, excerpt, content, category, author, date, tags, type, isPinned } = req.body;

    const nouvelleActualite = new Actualite({
      title,
      excerpt,
      content,
      category,
      author,
      date: date || new Date(),
      tags: tags ? tags.split(',').map(tag => tag.trim()) : [],
      type,
      isPinned: isPinned === 'true',
      image: req.file ? `/uploads/${req.file.filename}` : ''
    });

    await nouvelleActualite.save();
    res.status(201).json(nouvelleActualite);
  } catch (err) {
    res.status(400).json({ message: 'Erreur ajout actualit√©', error: err.message });
  }
});
app.delete('/api/actualites/:id', authAdmin, async (req, res) => {
  try {
    const deleted = await Actualite.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: 'Actualit√© non trouv√©e' });
    }
    res.json({ message: 'Actualit√© supprim√©e avec succ√®s' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur suppression', error: err.message });
  }
});
// ‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ actualit√©
app.put('/api/actualites/:id', authAdmin, upload.single('image'), async (req, res) => {
  try {
    const { title, excerpt, content, category, author, date, tags, type, isPinned } = req.body;

    const actualisation = {
      title,
      excerpt,
      content,
      category,
      author,
      date: date || new Date(),
      tags: tags ? tags.split(',').map(t => t.trim()) : [],
      type,
      isPinned: isPinned === 'true'
    };

    if (req.file) {
      actualisation.image = `/uploads/${req.file.filename}`;
    }

    const updated = await Actualite.findByIdAndUpdate(req.params.id, actualisation, { new: true });

    if (!updated) {
      return res.status(404).json({ message: 'Actualit√© non trouv√©e' });
    }

    res.json(updated);
  } catch (err) {
    res.status(500).json({ message: 'Erreur mise √† jour', error: err.message });
  }
});

app.post('/api/paiements', authAdmin, async (req, res) => {
  try {
    const { etudiant, cours, moisDebut, nombreMois, montant, note } = req.body;

    const coursArray = Array.isArray(cours) ? cours : [cours];

    const paiement = new Paiement({
      etudiant,
      cours: coursArray, // ‚úÖ ÿßŸÑŸÉŸÑ ÿØŸÅÿπÿ© Ÿàÿßÿ≠ÿØÿ©
      moisDebut: new Date(moisDebut),
      nombreMois,
      montant,
      note,
      creePar: req.adminId
    });

    await paiement.save();

    res.status(201).json({ message: 'Paiement group√© ajout√©', paiement });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.post('/api/messages/upload', authEtudiant, uploadMessageFile.single('fichier'), async (req, res) => {
  try {
    const { contenu, destinataireId, roleDestinataire } = req.body;

    const hasContenu = contenu && contenu.trim() !== '';
    const hasFile = !!req.file;

    if (!hasContenu && !hasFile) {
      return res.status(400).json({ message: 'Le contenu du message ou le fichier est requis.' });
    }

    const messageData = {
      expediteur: req.etudiantId,
      roleExpediteur: 'Etudiant',
      destinataire: destinataireId,
      roleDestinataire: 'Professeur',
      etudiant: req.etudiantId,
      professeur: destinataireId,
    };

    if (hasContenu) messageData.contenu = contenu.trim();
    if (hasFile) messageData.fichier = `/uploads/messages/${req.file.filename}`;

    const newMessage = new Message(messageData);
    await newMessage.save();

    res.status(201).json({
      message: 'Message envoy√© avec succ√®s.',
      data: newMessage,
    });
  } catch (err) {
    console.error('Erreur lors de l‚Äôenvoi du message avec fichier:', err);
    res.status(500).json({ message: 'Une erreur est survenue sur le serveur.' });
  }
});app.get('/api/etudiant/me', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId).select('-motDePasse');
    if (!etudiant) {
      return res.status(404).json({ message: '√âtudiant non trouv√©' });
    }
    res.json(etudiant);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});app.get('/api/etudiant/mes-professeurs-messages', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId);
    const coursEtudiant = etudiant.cours;

    const professeurs = await Professeur.find({
      cours: { $in: coursEtudiant },
      actif: true
    }).select('_id nom cours image genre lastSeen');

    // Pour chaque professeur, obtenir le dernier message
    const professeursAvecMessages = await Promise.all(
      professeurs.map(async (prof) => {
        const dernierMessage = await Message.findOne({
          $or: [
            { expediteur: prof._id, destinataire: req.etudiantId },
            { expediteur: req.etudiantId, destinataire: prof._id }
          ]
        })
        .sort({ date: -1 })
        .select('contenu date roleExpediteur');

        return {
          ...prof.toObject(),
          dernierMessage
        };
      })
    );

    res.json(professeursAvecMessages);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Lister les paiements
app.get('/api/paiements', authAdmin, async (req, res) => {
  try {
    const paiements = await Paiement.find()
      .populate('etudiant', 'nomComplet telephone') // afficher nomComplet et t√©l√©phone
      .populate('creePar', 'nom'); // afficher ÿßÿ≥ŸÖ ÿßŸÑŸÖÿØŸäÿ±

    res.json(paiements);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// üìå API: Liste paiements expir√©s
// üìå Route GET /api/paiements/expir√©s
app.get('/api/paiements/exp', authAdmin, async (req, res) => {
  try {
    const paiements = await Paiement.find()
      .populate('etudiant', 'image nomComplet actif')
      .sort({ moisDebut: 1 }); // ŸÜÿ±ÿ™ÿ®Ÿà ŸÖŸÜ ÿßŸÑÿ£ŸÇÿØŸÖ ŸÑŸÑÿ¨ÿØŸäÿØ

    const aujourdHui = new Date();

    // ŸÜÿÆÿ≤ŸÜŸà ÿ¨ŸÖŸäÿπ ÿßŸÑÿØŸÅÿπÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑÿ∑ÿßŸÑÿ® ŸàÿßŸÑŸÉŸàÿ±ÿ≥
    const paiementsParEtudiantCours = new Map();

    for (const p of paiements) {
      for (const coursName of p.cours) {
        const key = `${p.etudiant?._id}_${coursName}`;
        if (!paiementsParEtudiantCours.has(key)) {
          paiementsParEtudiantCours.set(key, []);
        }
        paiementsParEtudiantCours.get(key).push(p);
      }
    }

    const expires = [];

    for (const [key, paiementsCours] of paiementsParEtudiantCours.entries()) {
      const [etudiantId, nomCours] = key.split('_');
      const etudiant = paiementsCours[0].etudiant;

      if (!etudiant?.actif) continue;

      // ŸÜÿ≠ÿØÿØŸà ÿßŸÑŸÅÿ™ÿ±ÿßÿ™ ÿØŸäÿßŸÑ ŸÉŸÑ ÿØŸÅÿπÿ©
      const periodes = paiementsCours.map(p => {
        const debut = new Date(p.moisDebut);
        const fin = new Date(debut);
        fin.setMonth(fin.getMonth() + Number(p.nombreMois));
        return { debut, fin };
      });

      // ŸÜÿ±ÿ™ÿ®Ÿà ÿßŸÑŸÅÿ™ÿ±ÿßÿ™
      periodes.sort((a, b) => a.debut - b.debut);

      // ŸÜÿØŸÖÿ¨Ÿà ÿßŸÑŸÅÿ™ÿ±ÿßÿ™ ŸÑŸä ŸÖÿ™ÿØÿßÿÆŸÑŸäŸÜ ÿ£Ÿà ŸÖÿ™ÿ™ÿßÿ®ÿπŸäŸÜ
      const fusionnees = [];
      let current = periodes[0];

      for (let i = 1; i < periodes.length; i++) {
        const next = periodes[i];

        if (next.debut <= current.fin) {
          current.fin = new Date(Math.max(current.fin.getTime(), next.fin.getTime()));
        } else {
          fusionnees.push(current);
          current = next;
        }
      }

      fusionnees.push(current);

      // ŸÜÿ¥ŸàŸÅŸà Ÿàÿßÿ¥ ÿßŸÑŸäŸàŸÖ ÿØÿßÿÆŸÑ ÿ¥Ÿä Ÿàÿ≠ÿØÿ© ŸÖŸÜ ÿßŸÑŸÅÿ™ÿ±ÿßÿ™
      let actif = false;

      for (const periode of fusionnees) {
        if (aujourdHui >= periode.debut && aujourdHui <= periode.fin) {
          actif = true;
          break;
        }
      }

      if (!actif) {
        expires.push({
          etudiant,
          cours: nomCours,
          derniereFin: fusionnees[fusionnees.length - 1].fin,
        });
      }
    }

    res.json(expires);
  } catch (err) {
    console.error('Erreur serveur /exp:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour supprimer un message
app.delete('/api/messages/:messageId', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    const decoded = jwt.verify(token, 'jwt_secret_key');
    const messageId = req.params.messageId;

    // V√©rifier si le message existe
    const message = await Message.findById(messageId);
    if (!message) {
      return res.status(404).json({ message: 'Message non trouv√©' });
    }

    // V√©rifier que l'utilisateur est l'exp√©diteur du message
    if (message.expediteur.toString() !== decoded.id) {
      return res.status(403).json({ message: 'Non autoris√© √† supprimer ce message' });
    }

    // Supprimer le message
    await Message.findByIdAndDelete(messageId);
    
    res.json({ 
      message: 'Message supprim√© avec succ√®s', 
      messageId: messageId 
    });
  } catch (err) {
    console.error('Erreur lors de la suppression:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});


// Route pour supprimer une notification avec sauvegarde du contexte
app.delete('/api/notifications/:id', authAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log(`üóëÔ∏è Suppression notification: ${id}`);
    
    // Extraire les informations de l'ID de notification
    const [type, , etudiantId, nombreAbsences] = id.split('_');
    
    if (type === 'absence' && etudiantId) {
      // Sauvegarder la suppression avec le contexte
      const suppressionKey = `absence_${etudiantId}`;
      
      await NotificationSupprimee.findOneAndUpdate(
        { key: suppressionKey, type: 'absence_frequent' },
        {
          key: suppressionKey,
          type: 'absence_frequent',
          etudiantId: etudiantId,
          nombreAbsencesAuMomentSuppression: parseInt(nombreAbsences) || 0,
          dateSuppression: new Date(),
          supprimePar: req.user.id // ID de l'admin qui a supprim√©
        },
        { upsert: true, new: true }
      );
      
      console.log(`‚úÖ Suppression sauvegard√©e pour √©tudiant ${etudiantId} avec ${nombreAbsences} absences`);
    }
    
    res.json({ 
      success: true, 
      message: 'Notification supprim√©e avec succ√®s',
      context: type === 'absence' ? {
        etudiantId,
        nombreAbsences: parseInt(nombreAbsences) || 0
      } : null
    });
    
  } catch (err) {
    console.error('‚ùå Erreur suppression notification:', err);
    res.status(500).json({ error: err.message });
  }
});

// Route pour restaurer les notifications supprim√©es
app.post('/api/notifications/reset-deleted', authAdmin, async (req, res) => {
  try {
    const result = await NotificationSupprimee.deleteMany({});
    
    console.log(`üîÑ ${result.deletedCount} notifications supprim√©es restaur√©es`);
    
    res.json({
      success: true,
      restoredCount: result.deletedCount,
      message: 'Toutes les notifications supprim√©es ont √©t√© restaur√©es'
    });
    
  } catch (err) {
    console.error('‚ùå Erreur restauration notifications:', err);
    res.status(500).json({ error: err.message });
  }
});

// Route pour configurer les seuils d'absence
app.post('/api/notifications/seuils-absence', authAdmin, async (req, res) => {
  try {
    const { normal, urgent, critique } = req.body;
    
    // Valider les seuils
    if (!normal || !urgent || !critique || normal >= urgent || urgent >= critique) {
      return res.status(400).json({
        error: 'Les seuils doivent √™tre: normal < urgent < critique'
      });
    }
    
    // Sauvegarder en base (vous pouvez cr√©er un mod√®le Configuration)
    await Configuration.findOneAndUpdate(
      { key: 'seuils_absence' },
      {
        key: 'seuils_absence',
        value: { normal, urgent, critique },
        modifiePar: req.user.id,
        dateModification: new Date()
      },
      { upsert: true, new: true }
    );
    
    console.log(`‚öôÔ∏è Seuils d'absence mis √† jour: ${normal}/${urgent}/${critique}`);
    
    res.json({
      success: true,
      seuils: { normal, urgent, critique },
      message: 'Seuils d\'absence mis √† jour avec succ√®s'
    });
    
  } catch (err) {
    console.error('‚ùå Erreur mise √† jour seuils:', err);
    res.status(500).json({ error: err.message });
  }
});

// Route de statistiques d√©taill√©es pour les absences
app.get('/api/notifications/stats-absences', authAdmin, async (req, res) => {
  try {
    const etudiantsActifs = await Etudiant.find({ actif: true });
    const stats = {
      totalEtudiants: etudiantsActifs.length,
      parSeuil: {
        normal: 0,    // 10-14 absences
        urgent: 0,    // 15-19 absences
        critique: 0   // 20+ absences
      },
      repartition: [],
      moyenneAbsences: 0
    };
    
    let totalAbsences = 0;
    
    for (const etudiant of etudiantsActifs) {
      const absences = await Presence.countDocuments({
        etudiant: etudiant._id,
        present: false
      });
      
      totalAbsences += absences;
      
      stats.repartition.push({
        etudiantId: etudiant._id,
        nom: etudiant.nomComplet,
        absences: absences,
        niveau: absences >= 20 ? 'critique' : 
                absences >= 15 ? 'urgent' : 
                absences >= 10 ? 'normal' : 'ok'
      });
      
      if (absences >= 20) stats.parSeuil.critique++;
      else if (absences >= 15) stats.parSeuil.urgent++;
      else if (absences >= 10) stats.parSeuil.normal++;
    }
    
    stats.moyenneAbsences = Math.round(totalAbsences / etudiantsActifs.length * 100) / 100;
    
    // Trier par nombre d'absences d√©croissant
    stats.repartition.sort((a, b) => b.absences - a.absences);
    
    res.json(stats);
    
  } catch (err) {
    console.error('‚ùå Erreur stats absences:', err);
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ Route pour marquer un message comme lu
app.patch('/api/messages/:messageId/read', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    const decoded = jwt.verify(token, 'jwt_secret_key');
    const messageId = req.params.messageId;

    const message = await Message.findById(messageId);
    if (!message) {
      return res.status(404).json({ message: 'Message non trouv√©' });
    }

    // V√©rifier que l'utilisateur est le destinataire
    if (message.destinataire.toString() !== decoded.id) {
      return res.status(403).json({ message: 'Non autoris√©' });
    }

    // Marquer comme lu
    message.lu = true;
    message.dateLecture = new Date();
    await message.save();

    res.json({ message: 'Message marqu√© comme lu' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir le nombre de messages non lus
app.get('/api/messages/unread-count', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    const decoded = jwt.verify(token, 'jwt_secret_key');
    const userId = decoded.id;
    const role = decoded.role === 'etudiant' ? 'Etudiant' : 'Professeur';

    const unreadCount = await Message.countDocuments({
      destinataire: userId,
      roleDestinataire: role,
      lu: { $ne: true }
    });

    res.json({ unreadCount });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir les messages non lus par exp√©diteur
app.get('/api/messages/unread-by-sender', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    const decoded = jwt.verify(token, 'jwt_secret_key');
    const userId = decoded.id;
    const role = decoded.role === 'etudiant' ? 'Etudiant' : 'Professeur';

    const unreadMessages = await Message.aggregate([
      {
        $match: {
          destinataire: new mongoose.Types.ObjectId(userId),
          roleDestinataire: role,
          lu: { $ne: true }
        }
      },
      {
        $group: {
          _id: '$expediteur',
          count: { $sum: 1 }
        }
      }
    ]);

    // Convertir en objet pour faciliter l'utilisation c√¥t√© frontend
    const unreadCounts = {};
    unreadMessages.forEach(item => {
      unreadCounts[item._id.toString()] = item.count;
    });

    res.json(unreadCounts);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
app.put('/api/rappels/:id', async (req, res) => {
  try {
    const { dateRappel, note } = req.body;
    const updated = await Rappel.findByIdAndUpdate(
      req.params.id,
      { dateRappel, note },
      { new: true }
    );
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post('/api/rappels', async (req, res) => {
  try {
    console.log('üì• Body re√ßu:', req.body); // <= Ÿáÿ∞ÿß ŸÖŸáŸÖ
    const { etudiant, cours, montantRestant, note, dateRappel } = req.body;

    if (!etudiant || !cours || !montantRestant || !dateRappel) {
      return res.status(400).json({ message: 'Champs manquants' });
    }

    const rappel = new Rappel({ etudiant, cours, montantRestant, note, dateRappel });
    await rappel.save();
    res.status(201).json(rappel);
  } catch (err) {
    console.error('‚ùå Erreur POST /rappels:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
app.get('/api/vie-scolaire', async (req, res) => {
  try {
    const { cycle, year, category, search, limit = 10, page = 1 } = req.query;
    
    // Construction du filtre
    const filter = {};
    if (cycle) filter.cycle = cycle;
    if (year) filter.year = year;
    if (category && category !== 'all') filter.category = category;
    
    if (search) {
      filter.$or = [
        { title: { $regex: search, $options: 'i' } },
        { description: { $regex: search, $options: 'i' } },
        { fullDescription: { $regex: search, $options: 'i' } },
        { lieu: { $regex: search, $options: 'i' } },
        { organisateur: { $regex: search, $options: 'i' } }
      ];
    }
    
    const pageSize = parseInt(limit);
    const currentPage = parseInt(page);
    const skip = (currentPage - 1) * pageSize;
    
    // Compter le total des documents
    const total = await Activity.countDocuments(filter);
    
    // R√©cup√©rer les activit√©s avec pagination
    const activities = await Activity.find(filter)
      .sort({ date: -1, createdAt: -1 })
      .skip(skip)
      .limit(pageSize)
      .select('-__v');
    
    res.json({
      data: activities,
      currentPage,
      totalPages: Math.ceil(total / pageSize),
      totalItems: total,
      success: true
    });
    
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des activit√©s:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la r√©cup√©ration des activit√©s',
      success: false
    });
  }
});

// GET une activit√© par ID
app.get('/api/vie-scolaire/:id', async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ 
        error: 'ID d\'activit√© invalide',
        success: false
      });
    }
    
    const activity = await Activity.findById(req.params.id).select('-__v');
    
    if (!activity) {
      return res.status(404).json({ 
        error: 'Activit√© non trouv√©e',
        success: false
      });
    }
    
    res.json(activity);
    
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'activit√©:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la r√©cup√©ration de l\'activit√©',
      success: false
    });
  }
});

// POST cr√©er une nouvelle activit√© (admin uniquement)
app.post('/api/vie-scolaire', authAdmin, uploadVieScolaire.array('images', 10), async (req, res) => {
  try {
    const {
      title,
      date,
      time,
      category,
      description,
      fullDescription,
      participants,
      lieu,
      organisateur,
      materiel,
      year,
      cycle
    } = req.body;
    
    // Validation des champs requis
    if (!title || !date || !category || !description || !year || !cycle) {
      return res.status(400).json({
        error: 'Les champs title, date, category, description, year et cycle sont requis',
        success: false
      });
    }
    
    // Traitement des images upload√©es
    const images = req.files ? req.files.map(file => `/uploads/vieScolaire/${file.filename}`) : [];
    
    // Cr√©ation de l'activit√©
    const activity = new Activity({
      title: title.trim(),
      date: new Date(date),
      time: time?.trim(),
      category,
      description: description.trim(),
      fullDescription: fullDescription?.trim(),
      participants: participants ? parseInt(participants) : undefined,
      lieu: lieu?.trim(),
      organisateur: organisateur?.trim(),
      materiel: materiel?.trim(),
      images,
      year,
      cycle
    });
    
    await activity.save();
    
    res.status(201).json({
      data: activity,
      message: 'Activit√© cr√©√©e avec succ√®s',
      success: true
    });
    
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de l\'activit√©:', error);
    
    // Supprimer les fichiers upload√©s en cas d'erreur
    if (req.files) {
      req.files.forEach(file => {
        fs.unlink(file.path, (err) => {
          if (err) console.error('Erreur lors de la suppression du fichier:', err);
        });
      });
    }
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        error: 'Erreur de validation des donn√©es',
        details: error.message,
        success: false
      });
    }
    
    res.status(500).json({
      error: 'Erreur serveur lors de la cr√©ation de l\'activit√©',
      success: false
    });
  }
});

// PUT modifier une activit√© (admin uniquement)
app.put('/api/vie-scolaire/:id', authAdmin, uploadVieScolaire.array('images', 10), async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({
        error: 'ID d\'activit√© invalide',
        success: false
      });
    }
    
    const {
      title,
      date,
      time,
      category,
      description,
      fullDescription,
      participants,
      lieu,
      organisateur,
      materiel,
      year,
      cycle,
      keepExistingImages
    } = req.body;
    
    const existingActivity = await Activity.findById(req.params.id);
    if (!existingActivity) {
      return res.status(404).json({
        error: 'Activit√© non trouv√©e',
        success: false
      });
    }
    
    // Traitement des nouvelles images
    const newImages = req.files ? req.files.map(file => `/uploads/vieScolaire/${file.filename}`) : [];
    
    // Gestion des images existantes
    let finalImages = [];
    if (keepExistingImages === 'true') {
      finalImages = [...existingActivity.images, ...newImages];
    } else {
      finalImages = newImages.length > 0 ? newImages : existingActivity.images;
    }
    
    // Donn√©es √† mettre √† jour
    const updateData = {
      title: title?.trim() || existingActivity.title,
      date: date ? new Date(date) : existingActivity.date,
      time: time?.trim() || existingActivity.time,
      category: category || existingActivity.category,
      description: description?.trim() || existingActivity.description,
      fullDescription: fullDescription?.trim() || existingActivity.fullDescription,
      participants: participants ? parseInt(participants) : existingActivity.participants,
      lieu: lieu?.trim() || existingActivity.lieu,
      organisateur: organisateur?.trim() || existingActivity.organisateur,
      materiel: materiel?.trim() || existingActivity.materiel,
      images: finalImages,
      year: year || existingActivity.year,
      cycle: cycle || existingActivity.cycle
    };
    
    const updatedActivity = await Activity.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true, runValidators: true }
    );
    
    res.json({
      data: updatedActivity,
      message: 'Activit√© mise √† jour avec succ√®s',
      success: true
    });
    
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l\'activit√©:', error);
    
    // Supprimer les nouveaux fichiers upload√©s en cas d'erreur
    if (req.files) {
      req.files.forEach(file => {
        fs.unlink(file.path, (err) => {
          if (err) console.error('Erreur lors de la suppression du fichier:', err);
        });
      });
    }
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        error: 'Erreur de validation des donn√©es',
        details: error.message,
        success: false
      });
    }
    
    res.status(500).json({
      error: 'Erreur serveur lors de la mise √† jour de l\'activit√©',
      success: false
    });
  }
});

// DELETE supprimer une activit√© (admin uniquement)
app.delete('/api/vie-scolaire/:id', authAdmin, async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({
        error: 'ID d\'activit√© invalide',
        success: false
      });
    }
    
    const activity = await Activity.findById(req.params.id);
    if (!activity) {
      return res.status(404).json({
        error: 'Activit√© non trouv√©e',
        success: false
      });
    }
    
    // Supprimer les images associ√©es
    if (activity.images && activity.images.length > 0) {
      activity.images.forEach(imagePath => {
        const fullPath = path.join(__dirname, 'public', imagePath);
        fs.unlink(fullPath, (err) => {
          if (err) console.error('Erreur lors de la suppression de l\'image:', err);
        });
      });
    }
    
    await Activity.findByIdAndDelete(req.params.id);
    
    res.json({
      message: 'Activit√© supprim√©e avec succ√®s',
      success: true
    });
    
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'activit√©:', error);
    res.status(500).json({
      error: 'Erreur serveur lors de la suppression de l\'activit√©',
      success: false
    });
  }
});

// DELETE supprimer une image sp√©cifique d'une activit√© (admin uniquement)
app.delete('/api/vie-scolaire/:id/images/:imageIndex', authAdmin, async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({
        error: 'ID d\'activit√© invalide',
        success: false
      });
    }
    
    const activity = await Activity.findById(req.params.id);
    if (!activity) {
      return res.status(404).json({
        error: 'Activit√© non trouv√©e',
        success: false
      });
    }
    
    const imageIndex = parseInt(req.params.imageIndex);
    if (imageIndex < 0 || imageIndex >= activity.images.length) {
      return res.status(400).json({
        error: 'Index d\'image invalide',
        success: false
      });
    }
    
    // Supprimer le fichier physique
    const imagePath = activity.images[imageIndex];
    const fullPath = path.join(__dirname, 'public', imagePath);
    fs.unlink(fullPath, (err) => {
      if (err) console.error('Erreur lors de la suppression de l\'image:', err);
    });
    
    // Retirer l'image du tableau
    activity.images.splice(imageIndex, 1);
    await activity.save();
    
    res.json({
      data: activity,
      message: 'Image supprim√©e avec succ√®s',
      success: true
    });
    
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'image:', error);
    res.status(500).json({
      error: 'Erreur serveur lors de la suppression de l\'image',
      success: false
    });
  }
});
app.get('/api/rappels', async (req, res) => {
  try {
    const rappels = await Rappel.find({ status: 'actif' })
      .populate('etudiant', 'nomComplet'); // ŸÜÿ¨ŸÑÿ® ŸÅŸÇÿ∑ ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑŸÉÿßŸÖŸÑ

    res.json(rappels); // ŸÜÿ±ÿ≥ŸÑŸáÿß ŸÑŸÑŸÄ frontend
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
app.delete('/api/rappels/:id', async (req, res) => {
  try {
    await Rappel.findByIdAndDelete(req.params.id);
    res.json({ message: 'Rappel supprim√©' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ Route pour envoyer un message
app.post('/api/messages', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    const decoded = jwt.verify(token, 'jwt_secret_key');
    const { contenu, destinataireId, roleDestinataire } = req.body;

    if (!contenu || !destinataireId || !roleDestinataire) {
      return res.status(400).json({ message: 'Champs requis manquants' });
    }

    const message = new Message({
      contenu,
      destinataire: destinataireId,
      expediteur: decoded.id,
      roleExpediteur: decoded.role === 'etudiant' ? 'Etudiant' : 'Professeur',
      roleDestinataire,
      date: new Date(),
      lu: false
    });

    // Ajouter les champs pour la filtration
    if (decoded.role === 'etudiant') {
      message.professeur = destinataireId;
      message.etudiant = decoded.id;
    } else if (decoded.role === 'prof') {
      message.professeur = decoded.id;
      message.etudiant = destinataireId;
    }

    const savedMessage = await message.save();
    
    // Populer les donn√©es pour la r√©ponse
    await savedMessage.populate('expediteur', 'nom nomComplet email');
    await savedMessage.populate('destinataire', 'nom nomComplet email');

    res.status(201).json({ 
      message: 'Message envoy√© avec succ√®s', 
      data: savedMessage 
    });
  } catch (err) {
    console.error('Erreur lors de l\'envoi:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour marquer tous les messages d'une conversation comme lus
app.patch('/api/messages/mark-conversation-read', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    const decoded = jwt.verify(token, 'jwt_secret_key');
    const { expediteurId } = req.body;

    if (!expediteurId) {
      return res.status(400).json({ message: 'ID de l\'exp√©diteur manquant' });
    }

    const role = decoded.role === 'etudiant' ? 'Etudiant' : 'Professeur';

    await Message.updateMany(
      {
        destinataire: decoded.id,
        roleDestinataire: role,
        expediteur: expediteurId,
        lu: { $ne: true }
      },
      {
        $set: {
          lu: true,
          dateLecture: new Date()
        }
      }
    );

    res.json({ message: 'Messages marqu√©s comme lus' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir tous les messages pour un utilisateur
app.get('/api/messages', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    const decoded = jwt.verify(token, 'jwt_secret_key');
    const userId = decoded.id;
    const role = decoded.role === 'etudiant' ? 'Etudiant' : 'Professeur';

    const messages = await Message.find({
      $or: [
        { destinataire: userId, roleDestinataire: role },
        { expediteur: userId, roleExpediteur: role }
      ]
    })
    .sort({ date: -1 })
    .populate('expediteur', 'nom nomComplet email')
    .populate('destinataire', 'nom nomComplet email');

    res.json(messages);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir les messages entre un professeur et un √©tudiant sp√©cifique (pour le professeur)
app.get('/api/messages/professeur/:etudiantId', authProfesseur, async (req, res) => {
  try {
    const messages = await Message.find({
      professeur: req.professeurId,
      etudiant: req.params.etudiantId
    })
    .sort({ date: 1 })
    .populate('expediteur', 'nom nomComplet')
    .populate('destinataire', 'nom nomComplet');

    res.json(messages);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir les messages entre un √©tudiant et un professeur sp√©cifique (pour l'√©tudiant)
app.get('/api/messages/etudiant/:professeurId', authEtudiant, async (req, res) => {
  try {
    const messages = await Message.find({
      professeur: req.params.professeurId,
      etudiant: req.etudiantId
    })
    .sort({ date: 1 })
    .populate('expediteur', 'nom nomComplet')
    .populate('destinataire', 'nom nomComplet');

    res.json(messages);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir les professeurs de l'√©tudiant
app.get('/api/etudiant/mes-professeurs', authEtudiant, async (req, res) => {
  try {
    const etudiant = await Etudiant.findById(req.etudiantId);
    const coursEtudiant = etudiant.cours;

    const professeurs = await Professeur.find({
      cours: { $in: coursEtudiant },
      actif: true
    }).select('_id nom cours image genre');

    res.json(professeurs);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir les professeurs avec leurs derniers messages (pour l'√©tudiant)


// ‚úÖ Route pour v√©rifier le statut en ligne des utilisateurs
app.get('/api/users/online-status', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token manquant' });

    // Pour une vraie application, vous devriez impl√©menter un syst√®me de pr√©sence
    // Ici, on simule avec des utilisateurs al√©atoires en ligne
    const onlineUsers = []; // Remplacez par votre logique de pr√©sence

    res.json({ onlineUsers });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// ‚úÖ Route pour obtenir les informations de l'utilisateur actuel (√©tudiant)
app.get('/api/messages/notifications-etudiant', authEtudiant, async (req, res) => {
  try {
    const messages = await Message.find({
      destinataire: req.etudiantId,
      roleDestinataire: 'Etudiant',
      lu: false
    })
    .sort({ date: -1 })
    .limit(10)
    .populate({
      path: 'expediteur',
      select: 'nom nomComplet email image',
      model: 'Professeur'
    });

    res.json(messages);
  } catch (err) {
    console.error('Erreur chargement notifications messages:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

app.get('/api/notifications', authAdmin, async (req, res) => {
  try {
    const notifications = [];
    const aujourdHui = new Date();

    // üìå ÿØŸÖÿ¨ paiements ŸÑŸÉŸÑ ÿ∑ÿßŸÑÿ® ŸàŸÉŸàÿ±ÿ≥
    const paiements = await Paiement.find()
      .populate('etudiant', 'nomComplet actif')
      .sort({ moisDebut: 1 }); // ÿßŸÑÿ£ŸÇÿØŸÖ ÿ£ŸàŸÑÿßŸã

    const paiementsParEtudiantCours = new Map();

    for (const p of paiements) {
      const key = `${p.etudiant?._id}_${p.cours}`;
      if (!paiementsParEtudiantCours.has(key)) {
        paiementsParEtudiantCours.set(key, []);
      }
      paiementsParEtudiantCours.get(key).push(p);
    }

    for (const [key, paiementsCours] of paiementsParEtudiantCours.entries()) {
      const [etudiantId, nomCours] = key.split('_');
      const etudiant = paiementsCours[0].etudiant;
      if (!etudiant?.actif) continue;

      const periodes = paiementsCours.map(p => {
        const debut = new Date(p.moisDebut);
        const fin = new Date(debut);
        fin.setMonth(fin.getMonth() + Number(p.nombreMois));
        return { debut, fin };
      });

      // ŸÜÿØŸÖÿ¨Ÿà ÿßŸÑŸÅÿ™ÿ±ÿßÿ™
      periodes.sort((a, b) => a.debut - b.debut);
      const fusionnees = [];
      let current = periodes[0];

      for (let i = 1; i < periodes.length; i++) {
        const next = periodes[i];
        if (next.debut <= current.fin) {
          current.fin = new Date(Math.max(current.fin.getTime(), next.fin.getTime()));
        } else {
          fusionnees.push(current);
          current = next;
        }
      }

      fusionnees.push(current);

      // ŸÜÿ≠ÿØÿØŸà ÿßŸÑÿ≠ÿßŸÑÿ©
      let actif = false;
      let joursRestants = 0;

      for (const periode of fusionnees) {
        if (aujourdHui >= periode.debut && aujourdHui <= periode.fin) {
          actif = true;
          joursRestants = Math.ceil((periode.fin - aujourdHui) / (1000 * 60 * 60 * 24));
          break;
        }
      }

      const derniereFin = fusionnees[fusionnees.length - 1].fin;

      if (!actif) {
        notifications.push({
          id: `payment_expired_${etudiantId}_${nomCours}`,
          type: 'payment_expired',
          title: 'Paiement expir√©',
          message: `üí∞ Paiement de ${etudiant.nomComplet} pour le cours "${nomCours}" a expir√© le ${derniereFin.toLocaleDateString()}`,
          priority: 'urgent',
          timestamp: derniereFin,
          data: {
            etudiantId,
            etudiantNom: etudiant.nomComplet,
            cours: nomCours,
            joursExpires: Math.ceil((aujourdHui - derniereFin) / (1000 * 60 * 60 * 24)),
          },
        });
      } else if (joursRestants <= 7) {
        notifications.push({
          id: `payment_expiring_${etudiantId}_${nomCours}`,
          type: 'payment_expiring',
          title: 'Paiement expirant bient√¥t',
          message: `‚è≥ Paiement de ${etudiant.nomComplet} pour le cours "${nomCours}" expire dans ${joursRestants} jour(s)`,
          priority: joursRestants <= 3 ? 'high' : 'medium',
          timestamp: derniereFin,
          data: {
            etudiantId,
            etudiantNom: etudiant.nomComplet,
            cours: nomCours,
            joursRestants,
          },
        });
      }
    }

    // üéØ Absences
    const SEUILS_ABSENCE = { NORMAL: 10, URGENT: 15, CRITIQUE: 20 };
    const etudiantsActifs = await Etudiant.find({ actif: true });

    for (const etudiant of etudiantsActifs) {
      const absences = await Presence.find({
        etudiant: etudiant._id,
        present: false,
      });

      const nombreAbsences = absences.length;
      const notificationSupprimee = await NotificationSupprimee.findOne({
        key: `absence_${etudiant._id}`,
        type: 'absence_frequent',
      });

      let doitCreerNotification = false;
      let priorite = 'medium';
      let titre = '';
      let message = '';

      if (nombreAbsences >= SEUILS_ABSENCE.CRITIQUE) {
        priorite = 'urgent';
        titre = 'CRITIQUE: Absences excessives';
        message = `${etudiant.nomComplet} a ${nombreAbsences} absences (seuil critique: ${SEUILS_ABSENCE.CRITIQUE})`;
        doitCreerNotification = !notificationSupprimee || notificationSupprimee.nombreAbsencesAuMomentSuppression < nombreAbsences;
      } else if (nombreAbsences >= SEUILS_ABSENCE.URGENT) {
        priorite = 'high';
        titre = 'URGENT: Absences r√©p√©t√©es';
        message = `${etudiant.nomComplet} a ${nombreAbsences} absences (seuil urgent: ${SEUILS_ABSENCE.URGENT})`;
        doitCreerNotification = !notificationSupprimee || notificationSupprimee.nombreAbsencesAuMomentSuppression < nombreAbsences;
      } else if (nombreAbsences >= SEUILS_ABSENCE.NORMAL) {
        priorite = 'medium';
        titre = 'Attention: Absences multiples';
        message = `${etudiant.nomComplet} a ${nombreAbsences} absences (seuil normal: ${SEUILS_ABSENCE.NORMAL})`;
        doitCreerNotification = !notificationSupprimee || notificationSupprimee.nombreAbsencesAuMomentSuppression < nombreAbsences;
      }

      if (doitCreerNotification) {
        const absencesParCours = {};
        for (const absence of absences) {
          absencesParCours[absence.cours] = (absencesParCours[absence.cours] || 0) + 1;
        }

        notifications.push({
          id: `absence_frequent_${etudiant._id}_${nombreAbsences}`,
          type: 'absence_frequent',
          title: titre,
          message: message,
          priority: priorite,
          timestamp: new Date(),
          data: {
            etudiantId: etudiant._id,
            etudiantNom: etudiant.nomComplet,
            nombreAbsences,
            seuil: priorite.toLowerCase(),
            absencesParCours,
            derniereAbsence: absences.length > 0 ? absences[absences.length - 1].dateSession : null,
          },
        });
      }
    }

    // üìÖ Events
    const dans7jours = new Date();
    dans7jours.setDate(dans7jours.getDate() + 7);
    const evenements = await Evenement.find({
      dateDebut: { $gte: aujourdHui, $lte: dans7jours },
    }).sort({ dateDebut: 1 });

    for (const evenement of evenements) {
      const joursRestants = Math.ceil((new Date(evenement.dateDebut) - aujourdHui) / (1000 * 60 * 60 * 24));
      let priorite = 'medium';
      if (joursRestants === 0) priorite = 'urgent';
      else if (joursRestants === 1) priorite = 'high';

      notifications.push({
        id: `event_upcoming_${evenement._id}`,
        type: 'event_upcoming',
        title: `${evenement.type} programm√©`,
        message: joursRestants === 0
          ? `${evenement.titre} pr√©vu aujourd'hui`
          : `${evenement.titre} pr√©vu dans ${joursRestants} jour(s)`,
        priority: priorite,
        timestamp: evenement.dateDebut,
        data: {
          evenementId: evenement._id,
          titre: evenement.titre,
          type: evenement.type,
          dateDebut: evenement.dateDebut,
          joursRestants,
        },
      });
    }

    // üîΩ ÿ™ÿ±ÿ™Ÿäÿ® ÿ≠ÿ≥ÿ® ÿßŸÑÿ£ŸàŸÑŸàŸäÿ©
    const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };
    notifications.sort((a, b) => {
      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
      if (priorityDiff !== 0) return priorityDiff;
      return new Date(b.timestamp) - new Date(a.timestamp);
    });

    res.json({
      notifications,
      total: notifications.length,
      urgent: notifications.filter(n => n.priority === 'urgent').length,
      high: notifications.filter(n => n.priority === 'high').length,
      medium: notifications.filter(n => n.priority === 'medium').length,
    });
  } catch (err) {
    console.error('‚ùå Erreur notifications:', err);
    res.status(500).json({ error: err.message });
  }
});

app.get('/api/messages/notifications-professeur', authProfesseur, async (req, res) => {
  try {
    const messages = await Message.find({
      destinataire: req.professeurId,
      roleDestinataire: 'Professeur',
      lu: false
    })
    .sort({ date: -1 })
    .limit(10)
    .populate({
      path: 'expediteur',
      select: 'nom nomComplet email',
      model: 'Etudiant'
    });

    res.json(messages);
  } catch (err) {
    console.error('Erreur notifications professeur:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

// Route : GET /api/messages/notifications-etudiant
app.get('/notifications-etudiant', authEtudiant, async (req, res) => {
  try {
    const messages = await Message.find({
      etudiant: req.etudiantId,
      roleExpediteur: 'Professeur',
      lu: false
    })
    .populate('professeur', 'nom image')
    .sort({ date: -1 });

    res.json(messages);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

// Exemple Express
// backend route

app.put('/update-profil', authAdmin, async (req, res) => {
  const { nom, email, ancienMotDePasse, nouveauMotDePasse } = req.body;

  try {
    const admin = await Admin.findById(req.adminId);
    if (!admin) return res.status(404).json({ message: 'Admin introuvable' });

    // Mise √† jour du nom si fourni
    if (nom) {
      admin.nom = nom;
    }

    // Mise √† jour de l'email si fourni
    if (email) {
      admin.email = email;
    }

    // Mise √† jour du mot de passe si fourni
    if (ancienMotDePasse && nouveauMotDePasse) {
      const isMatch = await bcrypt.compare(ancienMotDePasse, admin.motDePasse);
      if (!isMatch) return res.status(401).json({ message: 'Ancien mot de passe incorrect' });

      const salt = await bcrypt.genSalt(10);
      admin.motDePasse = await bcrypt.hash(nouveauMotDePasse, salt);
    }

    await admin.save();
    res.json({ 
      message: 'Profil mis √† jour avec succ√®s',
      admin: {
        id: admin._id,
        nom: admin.nom,
        email: admin.email
      }
    });

  } catch (err) {
    console.error('Erreur update admin:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});
app.get('/api/professeur/mes-etudiants-messages', authProfesseur, async (req, res) => {
  try {
    // 1. R√©cup√©rer les cours du professeur connect√©
    const professeur = await Professeur.findById(req.professeurId).select('cours');
    if (!professeur) {
      return res.status(404).json({ message: 'Professeur introuvable' });
    }

    // 2. Trouver les √©tudiants qui ont au moins un cours commun
    const etudiants = await Etudiant.find({
      cours: { $in: professeur.cours }
    }).select('_id nomComplet email image genre lastSeen cours');

    // 3. R√©cup√©rer les messages de ce professeur
    const messages = await Message.find({ professeur: req.professeurId }).sort({ date: -1 });

    // 4. Mapper le dernier message par √©tudiant
    const lastMessagesMap = new Map();
    for (const msg of messages) {
      const etuId = msg.etudiant.toString();
      if (!lastMessagesMap.has(etuId)) {
        lastMessagesMap.set(etuId, {
          contenu: msg.contenu,
          date: msg.date,
          roleExpediteur: msg.roleExpediteur,
          fichier: msg.fichier
        });
      }
    }

    // 5. Fusionner les donn√©es des √©tudiants avec leur dernier message
    const result = etudiants.map(etudiant => ({
      ...etudiant.toObject(),
      dernierMessage: lastMessagesMap.get(etudiant._id.toString()) || null
    }));

    res.json(result);
  } catch (err) {
    console.error('Erreur lors de la r√©cup√©ration des √©tudiants:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});

app.post('/api/messages/upload-prof', authProfesseur, uploadMessageFile.single('fichier'), async (req, res) => {
  try {
    const { contenu, destinataireId, roleDestinataire } = req.body;

    const hasContenu = contenu && contenu.trim() !== '';
    const hasFile = !!req.file;

    if (!hasContenu && !hasFile) {
      return res.status(400).json({ message: 'Ÿäÿ¨ÿ® ÿ£ŸÜ Ÿäÿ≠ÿ™ŸàŸä ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿπŸÑŸâ ŸÜÿµ ÿ£Ÿà ŸÖŸÑŸÅ ŸÖÿ±ŸÅŸÇ' });
    }

    const messageData = {
      expediteur: req.professeurId,
      roleExpediteur: 'Professeur',
      destinataire: destinataireId,
      roleDestinataire: 'Etudiant',
      professeur: req.professeurId,
      etudiant: destinataireId,
    };

    if (hasContenu) messageData.contenu = contenu.trim();
    if (hasFile) messageData.fichier = `/uploads/messages/${req.file.filename}`;

    const newMessage = new Message(messageData);
    await newMessage.save();

    res.status(201).json({
      message: 'ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ®ŸÜÿ¨ÿßÿ≠',
      data: newMessage,
    });
  } catch (err) {
    console.error('ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÖŸÜ ÿßŸÑÿ£ÿ≥ÿ™ÿßÿ∞:', err);
    res.status(500).json({ message: 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ' });
  }
});
// ‚úÖ Route pour obtenir les informations du professeur connect√©
app.get('/api/professeur/me', authProfesseur, async (req, res) => {
  try {
    const professeur = await Professeur.findById(req.professeurId).select('-motDePasse');
    if (!professeur) {
      return res.status(404).json({ message: 'Professeur non trouv√©' });
    }
    res.json(professeur);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});


// Lancer le serveur
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`üöÄ Serveur lanc√© sur http://localhost:${PORT}`);
});